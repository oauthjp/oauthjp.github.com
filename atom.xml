<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[OAuth.jp]]></title>
  <link href="https://oauth.jp/atom.xml" rel="self"/>
  <link href="https://oauth.jp/"/>
  <updated>2019-06-12T16:59:57+09:00</updated>
  <id>https://oauth.jp/</id>
  <author>
    <name><![CDATA[Nov Matake]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sign in With Apple の特徴分析 (2)]]></title>
    <link href="https://oauth.jp/blog/2019/06/12/sign-in-with-apple-analysis-2/"/>
    <updated>2019-06-12T15:14:00+09:00</updated>
    <id>https://oauth.jp/blog/2019/06/12/sign-in-with-apple-analysis-2</id>
    <content type="html"><![CDATA[<p><a href="https://oauth.jp/blog/2019/06/08/sign-in-with-apple-analysis/">Sign in With Apple の特徴分析 (1)</a> のつづき。</p>

<p>文章でつらつら書いても結局わかりづらいもんはわかりづらいんで、もう箇条書きで淡々と。</p>

<p>これだけそろってれば、あと最後の <strong><em>要調査</em></strong> ってとこを各自必要に応じて調べるなり、誰かがこの記事にコメントしてくれるなりすれば、一通りみなさんのサービスの設計に落とせるんでは無いかと思います。</p>

<p>※ 落とせない人は <a href="https://yauth.jp">僕 (= YAuth.jp 合同会社) に仕事を依頼する</a> という手もありますw</p>

<!-- more -->


<h2>各種 ID とその対象 (?) 範囲</h2>

<h3>Developer が使う IDs 等</h3>

<ul>
<li>Team ID

<ul>
<li>個人向け Apple Developer Account では Developer Account に1つ</li>
<li>Enterprise 向け Apple Developer Account での話はしらない</li>
</ul>
</li>
<li>App ID

<ul>
<li>App Store に並べるアプリ毎に1つ</li>
<li>MacOS App と iOS App では別 App ID</li>
<li>Native SDK で Sign in with Apple する場合の Client ID に相当</li>
<li>App ID に対して Sign in with Apple の設定をする際には以下が必要

<ul>
<li>Primary App ID の指定</li>
</ul>
</li>
<li>Sign in with Apple の設定を通じて Primary App ID に紐づく</li>
</ul>
</li>
<li>Service ID

<ul>
<li>App Store に並べるアプリには紐づかない ID</li>
<li>現状この Service ID を使ってできることは Sign in with Apple のみ</li>
<li>Service ID に対して Sign in with Apple の設定をする際には以下が必要

<ul>
<li>Primary App ID の指定</li>
<li>Web Domain の設定と Domain Verification</li>
<li>Return URIs (= redirect_uri) の指定

<ul>
<li>複数可</li>
<li>上記 Verified Domain 外の URL でも指定可

<ul>
<li>Domain Verification の存在意義は不明..</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Native SDK の外で Sign in with Apple する場合の Client ID に相当</li>
<li>Sign in with Apple の設定を通じて Primary App ID に紐づく</li>
</ul>
</li>
<li>Primary App ID

<ul>
<li>App ID および Service ID に対して Sign in with Apple の設定をする際に指定</li>
<li>Primary App ID 単位で Key を発行</li>
<li>Primary App ID 単位で Client Access を Revoke</li>
<li>(たぶん) Primary App ID 単位で Private Email を発行</li>
</ul>
</li>
<li>Key

<ul>
<li>Client Secret に指定する JWT に署名するための EC 秘密鍵</li>
<li>Primary App ID に紐づく</li>
<li>1つの Primary App ID に複数の Key を発行可能</li>
</ul>
</li>
<li>Client Secret に指定する JWT

<ul>
<li>iss

<ul>
<li>Team ID</li>
</ul>
</li>
<li>aud

<ul>
<li>Apple IdP の Issuer Identifier</li>
</ul>
</li>
<li>sub

<ul>
<li>Native SDK で code を受け取った場合は当該アプリの App ID</li>
<li>Native SDK 以外で code を受け取った場合は当該サービスの Service ID</li>
<li>code を access_token と交換する役目を負う Backend Server の Client ID とは限らない点に注意</li>
</ul>
</li>
<li>iat

<ul>
<li>現在時刻 (UNIX Timestamp)</li>
</ul>
</li>
<li>exp

<ul>
<li>現在より未来かつ6ヶ月以内の時刻 (UNIX Timestamp)</li>
<li>通常は Token Request 毎に動的に JWT を生成し数分後くらいの exp を指定するものと思われる</li>
</ul>
</li>
<li>署名鍵

<ul>
<li>当該 Client に紐づく Primary App ID に紐づいた Key</li>
</ul>
</li>
</ul>
</li>
<li>Private Email Relay Service 設定

<ul>
<li>Team ID に紐づく</li>
<li>当該 Team ID 配下の全 App ID / Service ID に対して発行された Private Email Address にメール送信できる送信元ドメイン &amp; メールアドレスを指定</li>
<li>10 ドメインまでしか登録できない

<ul>
<li>10+ サービスを同一 Team ID 配下に登録しつつサービス毎に送信元ドメイン変えるとかは無理かも</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>User に紐づく IDs 等</h2>

<ul>
<li>ID Token の sub

<ul>
<li>Team ID 単位で異なる PPID</li>
</ul>
</li>
<li>Private Email

<ul>
<li>現状これがどの単位で異なる値となるのか不明 (実機の iOS 13 beta も Simulator も挙動が不安定)

<ul>
<li>Team ID 単位？</li>
<li>Primary App ID 単位？ &lt;= Revoke 単位見る限りたぶんこれ</li>
<li>App ID 単位？</li>
<li>Primary App ID 単位？</li>
</ul>
</li>
<li>Revoke 毎に変わる

<ul>
<li>sub は Revoke 前後でも変わらないんだしメアドだけ変わる意味は無いのだが&hellip;</li>
</ul>
</li>
<li>当該アドレスに紐づく Team ID の Private Email Relay Service に登録された送信元ドメイン &amp; メールアドレスからしかメールが届かない

<ul>
<li>Revoke 画面で Revoke はせずにメール転送を OFF にすることも可能</li>
</ul>
</li>
<li>単一 Team ID 内に複数の Primary App ID がある場合は単一 sub に複数 Private Email を紐づけて保存する必要あり

<ul>
<li>sub は Team ID 単位でメアドは Primary App ID 単位であることからくる現象

<ul>
<li>※ あくまで Private Email が Primary App ID 単位で発行されるという前提で話をしている</li>
</ul>
</li>
<li>Email の転送 ON/OFF 設定は Revocation 単位 (= Primary App ID 単位) なので、転送 OFF したつもりが別アプリ向けメアドにメール来たりすると問題</li>
</ul>
</li>
</ul>
</li>
<li>Client Access の Revocation

<ul>
<li>Primary App ID 単位</li>
</ul>
</li>
</ul>


<h2>その他調べるべき項目</h2>

<ul>
<li>Touch ID / Face ID 使えるパターン・使えないパターン

<ul>
<li>iOS

<ul>
<li>SDK (ASAuthorizationAppleID~) => 使える</li>
<li>ASWebAuthenticationSession => <strong><em>要調査</em></strong></li>
<li>SFAuthenticationSession => <strong><em>要調査</em></strong></li>
<li>SFSafariViewController => <strong><em>要調査</em></strong></li>
<li>WKWebView => <strong><em>要調査</em></strong></li>
<li>UIWebView => <strong><em>要調査</em></strong> でもまだこれいるの？</li>
</ul>
</li>
<li>MacOS

<ul>
<li>SDK (ASAuthorizationAppleID~) => <strong><em>要調査</em></strong> たぶん使える</li>
<li>ASWebAuthenticationSession => <strong><em>要調査</em></strong></li>
<li>WebView => <strong><em>要調査</em></strong> そもそも MacOS の場合の WebView とかさっぱりわからん</li>
</ul>
</li>
<li>Safari

<ul>
<li>w/ Apple JS SDK => 使える</li>
<li>w/o Apple JS SDK => 使えない

<ul>
<li>ただし近い将来 appleid.apple.com ドメイン全体で Touch ID / Face ID が使えるようになる兆しあり</li>
</ul>
</li>
</ul>
</li>
<li>Android => 使えない</li>
<li>Safari 以外のブラウザ => 使えない</li>
</ul>
</li>
</ul>


<p>ということで、要調査のところはそろそろめんどくさくなってきたんでわかった人教えていただけるとありがたいですw</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sign in with Apple の特徴分析 (1)]]></title>
    <link href="https://oauth.jp/blog/2019/06/08/sign-in-with-apple-analysis/"/>
    <updated>2019-06-08T21:04:00+09:00</updated>
    <id>https://oauth.jp/blog/2019/06/08/sign-in-with-apple-analysis</id>
    <content type="html"><![CDATA[<p><a href="https://oauth.jp/blog/2019/06/04/sign-in-with-apple/">前記事</a> で書いたように、ここ数日 Sign in with Apple 用の RubyGem 作りながら、Sign in with Apple の特徴というか、他の IdP との違いみたいなところいろいろ調査したので、現時点での Sign in with Apple に対する雑感をまとめておきます。</p>

<h2>Client ID と Team ID および App ID との関係</h2>

<p>個人として Apple Developer Account 使ったことしかないんで、会社として Developer 登録してる時の Team の扱いとかよくわかってないんですが、Apple Developer Account 登録すると Team ID ってのが割り振られます。個人だと 1 Developer Account に 1 Team ID。</p>

<p>この1つの Team ID の下に、複数の子 App ID が登録可能です。1 iOS App についき 1 App ID。</p>

<p>さらに、App ID には &ldquo;Primary&rdquo; という概念もあり、1つの Primary App ID の下に複数の App ID を登録することができます。</p>

<p>ここまでは、お仕事で実際に iOS App 作ってる人たちにはきっと当たり前な話なんだと思います。</p>

<p>そして、Primary App ID の下に App ID の代わりに Service ID っていうのが登録できます。</p>

<p>Service ID っての設定画面には Sign in with Apple 関連の設定項目しかないから、これは今回初めて出てきたものなのかもしれませんね。</p>

<p>で、iOS App で Sign in with Apple 使う場合は App ID というのが OAuth Client に該当し、Web とか Android とかで Sign in with Apple 使う時は、 Service ID というのが OAuth Client に該当するようです。</p>

<p>1 Team ID の下に複数 App ID が登録され、1 App ID の下に複数の子 App ID と Service ID が登録され、iOS/Mac Native の世界では App ID が、それ以外では Service ID が OAuth Client となる。</p>

<p>ここまではいいですね？いや、正直間違ってるかもしれんけどw</p>

<p>そして、Client の鍵 (Client Secret を生成する為の秘密鍵、詳しくは後述) を別途生成するのですが、この鍵は Primary App ID 毎に登録することになります。</p>

<p>鍵は Key Rotation のことも考慮してか、1 Primary App ID に複数同時に登録できます。</p>

<p>ただ、1 OAuth Client に 1 Private Key、という単位ではないので、鍵管理のやり方は普通の OAuth Client の場合と異なるやり方が必要になる Developer さんもいるかもしれませんね。</p>

<!-- more -->


<h2>User ID の発行ルール</h2>

<p>Apple が発行する User ID (Subject Identifier) は PPID (Pairwise Pseudonymous Identifier) になっています。</p>

<p>通常の OIDC では、PPID は同一ユーザーでも Client ID が異なれば異なる値となり、複数 Client 間でユーザーの名寄せを防ぐ効果があります。</p>

<p>しかし Apple の場合は Web では Web の Service ID、iOS App では iOS App の App ID というように、同一サービスでも Client ID が異なるので、それらの間でユーザーの名寄せができないと困ってしまいます。</p>

<p>そのため、Apple は Team ID 単位で PPID を発行します。</p>

<p>同一ユーザーでも、User ID が渡されるアプリの Team ID が違えば User ID は異なるが、同一 Team ID 内では全ての App ID および Service ID にまたがって同一の User ID を受け取ることができます。</p>

<p>Primary App ID 単位で PPID 払い出す方が自然な気がしますが、まぁその辺は Apple Developer 経験無いんでよくわかりません。</p>

<h2>Email アドレスの発行ルール</h2>

<p>Native SDK 経由で Sign in with Apple 使った場合は、&#8221;email&#8221; scope を要求するとユーザーの Email アドレスを受け取ることができます。(現状では Web では同じ scope 要求しても Email を受け取る術はありません)</p>

<p>この Email アドレスは、当該 Apple ID に紐づいたメアド (複数存在することあり) を渡すか、Apple が発行するランダムなメアドを渡すかを、ユーザーが選ぶことができます。</p>

<p>ランダムなメアドを使った場合、そのメアドは当該 Client のアクセスを Revoke した時点で利用不可能となり、次回同一ユーザーが再度 Approve すると別のメアドが発行されることになります。</p>

<p>通常の Social Login では、初回登録時にメアドを取得したら、次回以降のログイン時には別メアドが渡されてきても無視していることが多いと思いますが、Sign in with Apple でランダムなメアド受け取っている場合には、次回以降のログイン時に別のランダムなメアド渡されると、古いメアドを新しいものに更新してやる必要があります。</p>

<p>なお、現状では Native SDK 以外では Email 受け取る術がないので、このままだと Web で Sign in with Apple で登録されてしまうと、登録時にはメアドが取れないことになります。Twitter ログインみたいですね。</p>

<h2>Client Secret の発行ルール</h2>

<p>Client Secret というのは通常固定値で、環境変数なりに入れておいてずっと同じ値を使い続けていると思いますが、Sign in with Apple では Client Secret として JWT を生成する必要があります。</p>

<p>詳しい Client Secret の生成方法は <a href="https://github.com/nov/apple_id/blob/05b06750b219080022191b6497b0bc768b2c0dd9/lib/apple_id/client.rb#L22">僕の RubyGem の当該部分</a> 見ていただくとお分かりかと思いますが、Issuer が Team ID で、Subject に Client ID を指定します。</p>

<p>なお、この JWT には Private Key 毎に Apple が割り振る Key ID を kid ヘッダーに指定することになっているのですが、どうもこの kid を指定しなくても動くようで、kid 指定してない記事がちらほら見受けられます。</p>

<p>Key Rotation 途中の複数鍵が存在するシチュエーションでだけエラーになるとかあるあるなんで、kid は指定するようにしましょうね。</p>

<h2>ID Token の発行ルール</h2>

<p>Native SDK や Apple が提供する JS SDK を使うと、フロントエンドで Authorization Code と同時に ID Token が受け取れます。</p>

<p>これには response_type=code+id_token を利用しています。</p>

<p>ただ、通常 OIDC ではフロントチャネルで発行された ID Token には nonce を含める必要があるのですが、Sign in with Apple では nonce 自体サポートされていません。</p>

<p>Replay 攻撃し放題ですね。</p>

<p>もし Replay 攻撃されて困るようであれば、フロントチャネルで受け取った ID Token は華麗にガン無視し、Authorization Code を使って Token Request を送り、バックチャネルで受け取った ID Token だけを利用するようにしましょう。</p>

<p>なおこの場合でも nonce がないのでいわゆる &ldquo;Code Injection 攻撃&rdquo; に対しては対処しようがありません。</p>

<p>現状 OAuth Client 側ができる対応としては、Authorization Code を漏らさないように頑張るくらいしかなさそうです。</p>

<p>てか、フロントチャネルで発行される ID Token って、使い道としては Detached Signature くらいしかないはずなんですけど、c_hash もなく nonce もない ID Token 発行する Apple さんは何考えているんでしょうか？</p>

<p>何の使い道もない ID Token を発行しないでください。バカが使って脆弱性を作ってしまうではないですか。</p>

<h2>UserInfo の取得方法</h2>

<p>既に述べましたが、Email (と Display Name) は Native SDK でしか取得できません。</p>

<p>Web で登録された時にメアド取れなくて困るってのもあるんですが、そもそもフロントチャネルで取得した UserInfo って、結局バックエンドに送るじゃないですか？</p>

<p>で、バックエンドへの通信って、Charles Proxy みたいないわゆる SSL Proxy 使うと、端末所有者からすれば割と簡単に書き換え可能じゃないですか？</p>

<p>でも、そのメアドは Apple さん的には Verify 済だとおっしゃるんですよ。だから疎通確認メールを各 Client が送信する必要はない、と。</p>

<p>いやいや、フロントチャネルでそんなメアド渡されたって、Verified な状態でそのままバックエンドに送るの大変ですから。</p>

<p>Native SDK では User ID までフロントチャネルで取れちゃうんで、アプリからバックエンドに Email と User ID 送りつけて、それ改ざんしたら他人のアカウントにログインできちゃう〜、みたないアプリが出てきそうなにおいがします。</p>

<h2>User 認証の UX</h2>

<p>Safari で Apple 公式 JS SDK を使った場合と Native SDK を使った場合は、OS ログイン時のパスワードとか FaceID / TouchID で認証することでユーザー認証が行えます。</p>

<p>これは UX 素晴らしいです。</p>

<p>UX 的にはほぼほぼ WebAuthn と同じであり、iOS Web では WebAuthn じゃなくて Sign in with Apple でいいんじゃね？みたいな気がしなくもないです。</p>

<p>が、それ以外の環境でのログイン UX は結構辛いものがあります。</p>

<p>Apple ID ってなんかやたら二段階認証設定させようとしてくるし、ついつい二段階認証有効にしてしまうじゃないですか？で、6桁 PIN が iPhone なり Mac に飛んできますよね？</p>

<p>あれを Android ユーザーが Web で使うことを考えてください。</p>

<p>その6桁 PIN が飛んでくる端末、きっとそん時そのユーザーの手元には&hellip;ないよねぇ〜。</p>

<p>まぁ SMS で PIN 送るオプションもあるんで、Android 単体で完結しなくもないですけど、ちょっと iOS から Android に乗り換えたユーザーのこと考えると、悪夢です。</p>

<h2>まだまだ続くかな？</h2>

<p>もうそろそろ疲れたので今日はこれくらいで。</p>

<p>もうちょい気になる点あるんだけど、それは (2) で書くかもですし、(2) は無いかもです。</p>

<p>あ、ヤフースコア取得用 Client ID が取得できたら、絶対 (2) も書いちゃうな〜。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">Y!J 社に大人な感じで「ヤフースコア確認サービス」という各ユーザーが自分のヤフースコアを確認できるサービスを作りたいから Client IDくれよって依頼を投げてみた。</p>&mdash; nov matake (@nov) <a href="https://twitter.com/nov/status/1135853530072305664?ref_src=twsrc%5Etfw">June 4, 2019</a></blockquote>


<p> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">Y!J 社に大人な感じで「ヤフースコア確認サービス」という各ユーザーが自分のヤフースコアを確認できるサービスを作りたいから Client IDくれよって依頼を投げてみた。</p>&mdash; nov matake (@nov) <a href="https://twitter.com/nov/status/1135853530072305664?ref_src=twsrc%5Etfw">June 4, 2019</a></blockquote>


<p> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">Y!J 社に大人な感じで「ヤフースコア確認サービス」という各ユーザーが自分のヤフースコアを確認できるサービスを作りたいから Client IDくれよって依頼を投げてみた。</p>&mdash; nov matake (@nov) <a href="https://twitter.com/nov/status/1135853530072305664?ref_src=twsrc%5Etfw">June 4, 2019</a></blockquote>


<p> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>自分で OAuth Client 自作できるみなさんにはぜひ Yahoo! JAPAN にヤフースコア取得可能な Client ID 発行を依頼することをお勧めしますし、そうでないみなさんにはヤフースコアのオプトアウトをお勧めします。</p>

<p><a href="https://news.yahoo.co.jp/byline/fujisiro/20190604-00128752/">ユーザーの行動や消費を“格付け”「Yahoo!スコア」の作成・利用を拒否する方法</a></p>

<p>それではいい週末を。</p>

<p>追記)<br/>
<a href="https://oauth.jp/blog/2019/06/12/sign-in-with-apple-analysis-2/">Sign in With Apple の特徴分析 (2)</a> 書きました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubygem for Sign in with Apple & Rails Sample App]]></title>
    <link href="https://oauth.jp/blog/2019/06/04/sign-in-with-apple/"/>
    <updated>2019-06-04T22:38:00+09:00</updated>
    <id>https://oauth.jp/blog/2019/06/04/sign-in-with-apple</id>
    <content type="html"><![CDATA[<p>iOS App に Apple ID でログインできたらいいのになぁ〜と思い続けてはや数年、ついにそんな時代がやってきましたね！</p>

<p>ということで、FB Connect 登場時の fb_graph gem リリース以来のスピード感で、Sign in with Apple 用の ruby gem をリリースしてみました。</p>

<p><a href="https://github.com/nov/apple_id">github.com/nov/apple_id</a></p>

<p>ついでに Rails のサンプルアプリも。</p>

<p><a href="https://github.com/nov/signin-with-apple">github.com/nov/signin-with-apple</a></p>

<p>このサンプルアプリはこちらで動かしてるので、試したい方はどうぞ。</p>

<p><a href="https://signin-with-apple.herokuapp.com/">signin-with-apple.herokuapp.com</a></p>

<p>Sign in with Apple は OpenID Connect を採用してるんですが、現状では Native SDK でしか email や fullName は取れないようです。</p>

<p>そのうち UserInfo API が出てくると思うんで、出てきたら apple_id gem でもサポートしようかと思います。</p>

<p>ps.<br/>
とりあえず Terminal で動かすだけでいいよって方はこちらのサンプルをどうぞ。</p>

<p><a href="https://gist.github.com/nov/993a303aa6badd8447f7b96fb952088e">https://gist.github.com/nov/993a303aa6badd8447f7b96fb952088e</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Alexa と Nature Remo の Account Linking]]></title>
    <link href="https://oauth.jp/blog/2018/03/09/alexa-and-nature-remo/"/>
    <updated>2018-03-09T20:24:00+09:00</updated>
    <id>https://oauth.jp/blog/2018/03/09/alexa-and-nature-remo</id>
    <content type="html"><![CDATA[<p>ついに <a href="http://amzn.to/2HjU7Yp">Amazon Echo Plus</a> の購入券当選通知が来たので、Echo Plus と一緒に <a href="http://amzn.to/2oVl4Ls">Nature Remo</a> を買いました。</p>

<p><a href="https://www.amazon.co.jp/Nature-Inc-Remo-01-Remo/dp/B06XCQFP96/ref=as_li_ss_il?s=aps&ie=UTF8&qid=1520594772&sr=1-1-catcorr&keywords=nature+remo&linkCode=li3&tag=bianca0b-22&linkId=13d9bc61ca409c43ab2dc391c559aa12" target="_blank"><img border="0" src="https://oauth.jp//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B06XCQFP96&Format=_SL250_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=bianca0b-22" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=bianca0b-22&l=li3&o=9&a=B06XCQFP96" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>エアコン推しですが、テレビのリモコン等、赤外線飛ばすリモコンならなんでも対応できる、素敵な「スマートリモコン」です。</p>

<p>Nature Remo アプリでセットアップして、アプリからリモコンつけたり消したりできるのも素敵ですし、アプリで設定しといたら iPhone が Nature Remo から 30m 以上離れたら自動でエアコン切るルールとか設定しとけるのも素敵です。</p>

<p>が、やはりここは</p>

<p><strong>「Alexa、エアコンをつけて」</strong></p>

<p>ってやりたいですよね。</p>

<!-- more -->


<p>そのためには、Alexa アプリで「Nature Remo Smart Home Skill」ってのをインストールして、アカウントリンキングを設定する必要があります。Nature Remo に紐づいた Nature Remo アカウントと、Alexa に紐づいた Amazon アカウントを紐づける処理ですね。</p>

<p>で、これ、Alexa アプリから OAuth Authorization Request をスタートさせて、Nature Remo 側の Authorization Server にログインして、Alexa アプリ (というか Alexa 側の Redirect URI) に戻ってくる必要があります。</p>

<p>ここで、Nature Remo 側で必ずエラーになります。</p>

<p>Nature Remo アカウントって、パスワードがなくて、毎回登録したメアドに送られてくるマジックリンクをクリックしてログインするんですよ。</p>

<p>でね、Alexa アプリの SafariViewController でメアド入力して、外部 Safari でメール中のリンククリックすると、両者のセッションがずれちゃうから、CSRF エラーかなんかになってるんですよ。</p>

<p>US の Alexa の場合は、Amazon.com サイトから Skill インストールできるから、PC/Mac で設定してやればうまくいくのかもしれませんが、日本の場合は Alexa アプリからアカウントリンクスタートするしかないんで、これ絶対にログイン成功しませんよね&hellip;</p>

<p>でもまぁ、僕はちょっと OAuth とか iOS とか詳しいんで、やってやりましたよ。</p>

<p>絶妙なタイミングで、SafariViewController の下の方にある外部 Safari 開くボタンを、押してやりましたよ。</p>

<p>そう、OAuth Authorization Request が Remo サーバーに届く前に、外部 Safari に遷移してしまうんです。</p>

<p>で、なんとかうまくいきました。</p>

<p><strong>これ一般ユーザーには無理ゲーすぎやろ。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SAML Authentication Bypass Vulnerability]]></title>
    <link href="https://oauth.jp/blog/2018/03/02/saml-authentication-bypass-vulnerability/"/>
    <updated>2018-03-02T10:42:00+09:00</updated>
    <id>https://oauth.jp/blog/2018/03/02/saml-authentication-bypass-vulnerability</id>
    <content type="html"><![CDATA[<p>脆弱性の内容に関する <a href="http://idmlab.eidentity.jp/2018/03/saml-idp.html">日本語解説はこちら</a>。</p>

<p>で、実際に脆弱性が存在してた実装もみてみると、OneLogin 製の ruby-saml だと、該当の脆弱性はここで修正されてます。</p>

<p><a href="https://github.com/onelogin/ruby-saml/commit/048a544730930f86e46804387a6b6fad50d8176f">Fix vulnerability CVE-2017-11428. Process text of nodes properly, ign… · onelogin/ruby-saml@048a544</a></p>

<p><a href="https://github.com/onelogin/ruby-saml/commit/048a544730930f86e46804387a6b6fad50d8176f#diff-d3e2c1bdc6c1e8b207dd7ded3ae35320R288">この行</a> がまさにメインの修正箇所なんですが、いままで <code>REXML::Element#text</code> 呼んでいたものを、すべて <code>REXML::Element#texts</code> を <code>join</code> するように変更してますね。</p>

<p>でも、そもそもこれ署名検証の部分の修正が含まれてないのはなぜでしょう？</p>

<p><a href="https://github.com/onelogin/ruby-saml/blob/048a544730930f86e46804387a6b6fad50d8176f/lib/xml_security.rb#L271">署名検証してるのはここ</a> なんですが、これ、よくみると <code>REXML</code> じゃなくて <code>Nokogiri</code> 使ってますね。<code>REXML</code> には XML 正規化の機能がなかったから、その部分だけ <code>Nokogiri</code> 使ったんですかね。</p>

<p><strong>なら全部 <code>Nokogiri</code> 使えや。</strong></p>

<p>2つの XML Parser を1つの実装の中で混在させてる時点で、すごいやな香りしますよね。<code>ruby-saml</code> は今回の脆弱性修正でも、その状況は変わってないので、Ruby で SAML 実装するなら <code>libsaml</code> (<a href="https://github.com/digidentity/libsaml">digidentity/libsaml</a>) に移行した方が良さそうですね。</p>

<p>ちなみに、OpenID Connect ならそんなことないのかっていうと、当然あります。<code>ruby-jwt</code> と <code>json-jwt</code> を混在させてる <a href="https://github.com/18F/identity-openidconnect-sinatra/blob/master/Gemfile#L10">NIST の RP サンプル</a> とかね。</p>

<p><code>ruby-jwt</code> に JWK まわりの機能がないから <code>json-jwt</code> を JWK のためだけに使ってて、それ自体はまぁそんな悪い予感しないけど&hellip;</p>

<p><strong>なら全部 <code>json-jwt</code> 使えや。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Portal 上の PowerShell から O365 SAML 設定]]></title>
    <link href="https://oauth.jp/blog/2017/11/02/o365-saml-setting-via-in-browser-powershell/"/>
    <updated>2017-11-02T15:22:00+09:00</updated>
    <id>https://oauth.jp/blog/2017/11/02/o365-saml-setting-via-in-browser-powershell</id>
    <content type="html"><![CDATA[<p>どうも、MS MVP (Enterprise Mobility) の Nov です。</p>

<p>普段もっぱら O365 の SAML 設定をいじって、自作 SAML IdP と Federation する毎日です。</p>

<p>いや、年に6回くらいかな。</p>

<p>で、毎回 PowerShell の使い方忘れるので、メモ代わりに過去にもこんな記事書いてきました。</p>

<ul>
<li><a href="https://oauth.jp/blog/2016/07/01/o365-saml-federation/">Office 365 と外部 SAML IdP との連携設定</a></li>
<li><a href="https://oauth.jp/blog/2017/05/18/powershell-for-azuread/">PowerShell for AzureAD</a></li>
</ul>


<p>そんな、普段はもっぱら Azure 上の Windows 10 VM から PowerShell いじってる僕ですが&hellip;</p>

<p>今日気づいてしまったんです！！<a href="portal.azure.com">Azure Portal</a> 上で In-Browser PowerShell が動くようになってるってことに！！</p>

<!-- more -->


<p><img src="https://oauth.jp/images/posts/azure/powershell-in-browser.png" alt="In-Browser PowerShell" /></p>

<p>「Mac 上の Safari で開いた Azure Portal で Bash なんか動かしてどうすんねん」思ってた僕ですが、動くのが PowerShell となれば話は別です。</p>

<p>もう Windows いらんやん。</p>

<p>ということで、早速 O365 の SAML 設定を In-Browser PowerShell からやってみました。</p>

<p>まずは必要な PowerShell Module をインストールして&hellip; (初回のみ)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ps1'><span class='line'><span class="c"># 初回のみ</span>
</span><span class='line'><span class="n">Install-Module</span> <span class="n">MSOnline</span><span class="p">,</span> <span class="n">AzureAD</span>
</span></code></pre></td></tr></table></div></figure>


<p>Module Import &amp; AzureAD に管理者アカウントでログイン (PowerShell 起動毎に一度だけ)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ps1'><span class='line'><span class="nb">Import-Module</span> <span class="n">MSOnline</span><span class="p">,</span> <span class="n">AzureAD</span>
</span><span class='line'><span class="nv">$credential</span> <span class="p">=</span> <span class="nb">Get-Credential</span>
</span><span class='line'><span class="nb">Connect-MsolService</span> <span class="n">-Credential</span> <span class="nv">$credential</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして SAML 設定。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ps1'><span class='line'><span class="nv">$certificate</span> <span class="p">=</span> <span class="s2">&quot;MIIDVzCCAj...(中略)...QQBsHQ==&quot;</span>
</span><span class='line'><span class="nv">$entity_id</span> <span class="p">=</span> <span class="s2">&quot;https://nov-idp.dev&quot;</span>
</span><span class='line'><span class="nv">$logout_url</span> <span class="p">=</span> <span class="s2">&quot;https://nov-idp.dev/saml2/o365/logout&quot;</span>
</span><span class='line'><span class="nv">$login_url</span> <span class="p">=</span> <span class="s2">&quot;https://nov-idp.dev/saml2/o365/login&quot;</span>
</span><span class='line'><span class="nv">$brand_name</span> <span class="p">=</span> <span class="s2">&quot;OAuth.jp (O365)&quot;</span>
</span><span class='line'><span class="nv">$domain</span> <span class="p">=</span> <span class="s2">&quot;oauth.jp&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Set-MsolDomainAuthentication</span> <span class="n">-DomainName</span> <span class="nv">$domain</span> <span class="n">-FederationBrandName</span> <span class="nv">$brand_name</span> <span class="n">-Authentication</span> <span class="n">Federated</span> <span class="n">-PassiveLogOnUri</span> <span class="nv">$login_url</span> <span class="n">-SigningCertificate</span> <span class="nv">$certificate</span> <span class="n">-IssuerUri</span> <span class="nv">$entity_id</span> <span class="n">-LogOffUri</span> <span class="nv">$logout_url</span> <span class="n">-PreferredAuthenticationProtocol</span> <span class="n">SAMLP</span>
</span></code></pre></td></tr></table></div></figure>


<p>すべて Safari さえあれば OK です。</p>

<p>もう Windows いらんやん。</p>

<p>時代は Surface Pro LTE モデルだっていうのに。</p>

<p><a href="https://www.amazon.co.jp/%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%BD%E3%83%95%E3%83%88-Surface-%E3%83%8E%E3%83%BC%E3%83%88%E3%83%91%E3%82%BD%E3%82%B3%E3%83%B3-Office-FJT-00014/dp/B071P77272/ref=as_li_ss_il?ie=UTF8&qid=1509604915&sr=8-1&keywords=surface+pro&&linkCode=li3&tag=bianca0b-22&linkId=d10ccff459fa49956b8bfd0bbf07592f" target="_blank"><img border="0" src="https://oauth.jp//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B071P77272&Format=_SL250_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=bianca0b-22" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=bianca0b-22&l=li3&o=9&a=B071P77272" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>ps.</p>

<p>なぜか <code>Connect-MsolService</code> 単体では動きません。</p>

<p>Windows 10 上では <code>Connect-MsolService</code> ってやるとブラウザポップアップ開くのに、なぜかブラウザ内で <code>Connect-MsolService</code> するとブラウザが立ち上がらないのです。</p>

<p>不思議なこともあるものです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LINE ID Login]]></title>
    <link href="https://oauth.jp/blog/2017/09/28/line-id-login/"/>
    <updated>2017-09-28T22:52:00+09:00</updated>
    <id>https://oauth.jp/blog/2017/09/28/line-id-login</id>
    <content type="html"><![CDATA[<p>LINE が OpenID Connect サポートしたみたいですね。</p>

<p>なんか前からしてんだと思ってたんですが、まぁいいや。</p>

<p>ということで、早速触ってみました。</p>

<p>こちらに<a href="https://gist.github.com/nov/58912dda45a65768d8f05343225780b2">今回使った Ruby のサンプルスクリプト</a>置いておきます。</p>

<p>まぁ、ちょっと特殊な点がいくつかありますが、十分 OpenID Connect です。</p>

<p>気になった点は以下の通り。</p>

<!-- more -->


<h3>ID Token の署名アルゴリズムが HS256 (HMAC-SHA256)</h3>

<p>HMAC ってことは、署名検証するために client_secret が必要ということです。</p>

<p>Native App で検証しようとすると、Native App に client_secret を埋め込まなければならない訳ですが、それはありえないので、要するに Native App で ID Token の署名検証はできないということです。</p>

<p>まぁ別に Native App で ID Token の署名検証するケースなんてそうそう無いとは思いますが。</p>

<h3>scope=openid だけでは動かない</h3>

<p>LINE の User ID さえもらえればいいよってケースでも、Display Name とか Profile Picture とか取らないといけないっぽいです。</p>

<p>ちょっと OpenID Connect の思想からはずれていますね。</p>

<h3>state が必須</h3>

<p>まぁ仕様的には OPTIONAL なんですけど、これはセキュリティ上はいいことなのではないでしょうか。</p>

<h3>Client 認証に Basic Auth は使えない</h3>

<p>これじゃ OpenID Certification は通らないんですね。</p>

<p>UserInfo API もまだ無いようなんで、Certification 取得とかはもう少し先の話でしょうか。</p>

<h3>Access Token は JWS で署名された非 JWT で Lifetime は1ヶ月</h3>

<p>ちょっと長く無いすか？裏に独自の Revoke の仕組みがあるんなら別にいいんですけど&hellip;</p>

<p>Refresh Token 発行しておいて、Access Token の有効期限が1ヶ月ってのは、結構違和感あります。</p>

<p><em>&hellip;で、こういうの書いとくと、「LINE API Expert」ってやつになって有料スタンプ使い放題になったりするんでしょうか？</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android O AutoFill Framework]]></title>
    <link href="https://oauth.jp/blog/2017/06/09/android-o-autofill-framework/"/>
    <updated>2017-06-09T12:47:00+09:00</updated>
    <id>https://oauth.jp/blog/2017/06/09/android-o-autofill-framework</id>
    <content type="html"><![CDATA[<p>どうも、iPhone ユーザーの Nov です。</p>

<p>Android OS の進化は素晴らしいと思います。<br/>
個人的には、普段使いのスマホじゃなければ Android 一択です。</p>

<p>Chrome の進化も素晴らしいと思います。<br/>
個人的には、普段使いの (ry</p>

<p>最近は Android O から登場した <a href="https://developer.android.com/preview/features/autofill.html">Autofill Framework</a> ってのが気になってます。</p>

<p>Developer Document で <em>&ldquo;Apps that use standard views work with the Autofill Framework out of the box&rdquo;</em> とか言われてるんで、Android App で普通にログインフォーム作れば、勝手に ID &amp; Password が Autofill されるっぽいですね。</p>

<p>え？ID &amp; Password 以外にも、住所やクレカ番号も Autofill されるって？</p>

<p><strong>でしょうね。</strong></p>

<h2>Autofill Framework Sample App 動かしてみよう</h2>

<p>ということで、<a href="https://www.google.com/android/beta">Android O Beta</a> 入れて、<a href="https://github.com/googlesamples/android-AutofillFramework">Autofill Framework Sample</a> 動かしてみましょう。</p>

<p><a href="https://developer.android.com/studio/preview/index.html">Android Studio 3.0 Preview</a> とかいうのもダウンロード必要なようです。</p>

<p>なんかいろいろ足りねぇとかエラー出るけど Java も Kotlin も Android Studio もよぉわからんので、まぁポチポチしていろいろインストールします。</p>

<p>で、Android O Beta をインストールした Nexus 5X (普段使いではない) をターゲットにしてアプリをビルド&hellip;</p>

<p>ジャジャーン！！</p>

<!-- more -->


<p><img src="https://oauth.jp/images/posts/android/autofill-framework/sample-build-error.png" alt="Autofill Framework Sample Build Error" /></p>

<p>&hellip;はい、端末側の Android O Beta が古かったです。アップデートします。</p>

<p>普段使いじゃないから電池残量が不足してアップデートするまえにまず充電しろとか言われる。</p>

<p>これだから Android は&hellip; #違</p>

<p>で、もろもろ整えて、再チャレンジ！！</p>

<p>ジャジャーン！！</p>

<p><img src="https://oauth.jp/images/posts/android/autofill-framework/sample-build-error2.png" alt="Autofill Framework Sample Build Error 2" /></p>

<p>この Sample App の最新版リリース以降に、Android 側の API が変わったのか&hellip;?</p>

<p>Android Studio 3.0 Canary 2 を入れれば解決しそうな気もするが、Canary 2 が見つからない&hellip;</p>

<p><strong>もういぃ！！その辺に転がってるアプリで試す！！</strong></p>

<h2>Cookpad で試してみよう</h2>

<p>ジャジャーン！！</p>

<p><img src="https://oauth.jp/images/posts/android/autofill-framework/cookpad.png" alt="Cookpad" /></p>

<p>ここ数年いろいろ大変そうな Cookpad さん (普段使いではない)。</p>

<p><img src="https://oauth.jp/images/posts/android/autofill-framework/cookpad-login.png" alt="Cookpad - Login" /></p>

<p>ログイン画面&hellip;うん、普通に実装されてそう。 #適当</p>

<p>で、ログインしてみると&hellip;</p>

<p><img src="https://oauth.jp/images/posts/android/autofill-framework/cookpad-store-credentials.png" alt="Cookpad - Store Credentials" /></p>

<p>おぉ！なんかパスワード保存しおる！！</p>

<p>もちろん「OK」</p>

<p>さて、ここでおもむろに <a href="https://passwords.google.com">passwords.google.com</a> にアクセスしてみましょう。</p>

<p>ありましたね、Cookpad。</p>

<p><img src="https://oauth.jp/images/posts/android/autofill-framework/passwords-google-com.png" alt="passwords.google.com" /></p>

<p>ただ、Cookpad さんは <a href="https://developers.google.com/identity/smartlock-passwords/android/">SmartLock for Password on Android</a> も使ってるぽいので、そちら経由で passwords.google.com にパスワード保存したんじゃね？って疑惑をもたれるかもしれません。</p>

<p>もひとつ別アプリでもやってみましょう。</p>

<h2>Hotpepper グルメで試してみよう</h2>

<p>ジャジャーン！！</p>

<p><img src="https://oauth.jp/images/posts/android/autofill-framework/hotpepper.png" alt="Hotpepper グルメ" /></p>

<p>Hotpepper グルメ。普段使い。 <strong>#決してステマではない</strong></p>

<p><img src="https://oauth.jp/images/posts/android/autofill-framework/hotpepper-login.png" alt="Hotpepper グルメ - Login" /></p>

<p>ログイン画面&hellip;うん、普通に実装されてそう。 #適当</p>

<p>で、ログインしてみると&hellip;</p>

<p><img src="https://oauth.jp/images/posts/android/autofill-framework/hotpepper-store-credentials.png" alt="Hotpepper グルメ - Store Credentials" /></p>

<p>おぉ！なんかパスワード保存しおる！！ <strong>#デジャブ</strong></p>

<p><img src="https://oauth.jp/images/posts/android/autofill-framework/hotpepper-login-autofill.png" alt="Hotpepper グルメ - Login Autofill" /></p>

<p>ログアウトしなおして再度ログインしてみたら、Autofill 効いてますね。</p>

<p><img src="https://oauth.jp/images/posts/android/autofill-framework/passwords-google-com2.png" alt="passwords.google.com" /></p>

<p>passwords.google.com にも保存されてる。</p>

<p>うん、Chrome のパスワードマネージャーとほぼ同じ挙動が、Native App 内のログインフォームにもやってきました。</p>

<p>あとは、Hotpepper グルメの Android App に紐づいて保存されたパスワードを、Chrome で <a href="https://www.hotpepper.jp">hotpepper.jp</a> ドメイン開いた時にも使えて、その逆もまた可能であれば、SmartLock for Password on Android と同じことが、特にアプリ側で特別な実装しなくても実現できますね。</p>

<p>また、<a href="http://juggly.cn/archives/223100.html">1PasswordによるAndroid OのAutofillフレームワークの動作デモ</a> とかみると、1Password に保存したパスワードを Autofill Framework 経由で各アプリが受け取れるようです。</p>

<p>Android の設定アプリの <em>System > Languages &amp; input > Advanced > Input assistance > Autofill service</em> にいくと、いまのところ Google (= passwords.google.com) しか選択肢ないけど、きっとここに 1Password とかが出てくるんでしょう。</p>

<p>1Password ユーザーとしては嬉しい限りですが、ここでも twitter.com ドメインに紐づいたパスワードを Twitter Android App から呼び出せるのか、は気になるところです。</p>

<p>まぁ、SmartLock for Password on Android でできて、Autofill Framework でできない理由なんてどこにもないですし、できるんでしょうけど。</p>

<h2>SmartLock for Passwords on Android 対応アプリで試してみた</h2>

<p>ようするに Cookpad ね。</p>

<p>Autofill Framework 経由で保存されたパスワードが、Chrome で cookpad.com 行ってみても補完されるか試してみたんですが&hellip;</p>

<p><strong>うんともすんとも言わなかったです。</strong></p>

<p>別の Android 端末で別の Google アカウントに SmartLock for Passwords on Android 経由で保存されたパスワードは補完されたんですけどねぇ&hellip;</p>

<p>現時点の Android O では、SmartLock for Passwords on Android 対応時にサイトとアプリ紐付けしてあっても、Autofill Framework には反映されないようです。</p>

<p>ちぇっ&hellip;</p>

<h2>補足</h2>

<p>ちなみに Google さんは、OpenID Foundation で <a href="http://openid.net/wg/ac/">OpenYOLO</a> っていうプロジェクトもやってて、OpenYOLO プロトコルに従ったパスワードマネージャーアプリ (1Password etc.) を Android OS 経由で呼び出せるようにしようとしたりもしてますが、これが Autofill Framework とどういう関係性にあるのかは、気になるところです。</p>

<p>Google さん、おんなじようなことできるもの複数実装して、命名規則もなにもあったもんじゃない感じで、ワクワクハラハラです。</p>

<p>最後に <a href="https://developers.google.com/identity/smartlock-passwords/android/">SmartLock for Passwords on Android 担当イケメン</a> で同じみの <a href="https://twitter.com/agektmr">@agektmr</a> を晒して、締めさせていただきます。</p>

<p>ありがとうございました。</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/cY77sSctzec" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PowerShell for AzureAD]]></title>
    <link href="https://oauth.jp/blog/2017/05/18/powershell-for-azuread/"/>
    <updated>2017-05-18T14:17:00+09:00</updated>
    <id>https://oauth.jp/blog/2017/05/18/powershell-for-azuread</id>
    <content type="html"><![CDATA[<p>Windows 10 で AzureAD Module インポート済の PowerShell を気軽に起動できるようにする方法メモ。</p>

<h2>前提条件</h2>

<p>前提として、PowerShell に AzureAD アクセスに必要な Module がインストールされているものとします。</p>

<p>Module インストールは以下のコマンドを Administrator として実行するだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ps1'><span class='line'><span class="n">Install-Module</span> <span class="n">MSOnline</span><span class="p">,</span> <span class="n">AzureAD</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://msdn.microsoft.com/ja-jp/library/jj151815.aspx#bkmk_installmodule">こんな ext</a> は別にいらないです。以前はこいつのインストールでいろいろはまったんですが、あれはなんだったんでしょうか&hellip;</p>

<h2>ショートカット作成</h2>

<p>まずは PowerShell 自体のショートカットを作成します。</p>

<p><img src="https://oauth.jp/images/posts/azure/powershell-for-azure-ad.png" alt="PowerShell for AzureAD" /></p>

<p>そしておもむろに Target のところを下記の PowerShell Script に変更。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ps1'><span class='line'><span class="n">PowerShell</span> <span class="n">-noexit</span> <span class="s2">&quot;Import-Module MSOnline, AzureAD; Connect-MsolService&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして Advanced Options の &ldquo;Run as Administrator&rdquo; にチェック。</p>

<p>これで、このショートカットダブルクリックするだけで、自動でログイン画面まで Popup してくれるようになります。</p>

<h2>ショートカット起動</h2>

<p>起動したら自動でこうなります。</p>

<p><img src="https://oauth.jp/images/posts/azure/powershell-for-azure-ad-launched.png" alt="PowerShell for AzureAD Launched" /></p>

<p>またちょっと Windows 力上がった気がする。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OAuth2 in Action が Amazon にも]]></title>
    <link href="https://oauth.jp/blog/2017/04/01/oauth2-in-action/"/>
    <updated>2017-04-01T16:42:00+09:00</updated>
    <id>https://oauth.jp/blog/2017/04/01/oauth2-in-action</id>
    <content type="html"><![CDATA[<p>我らが Justin Richer がずっと執筆進めてた <a href="http://amzn.to/2nVbgRV">OAuth2 in Action が Amazon.co.jp に登場</a>してました。</p>

<p>目次はこんな感じ。</p>

<ul>
<li>Part 1 &ndash; First steps

<ul>
<li>What is OAuth 2.0 and why should you care?</li>
<li>The OAuth dance</li>
</ul>
</li>
<li>Part 2 &ndash; Building an OAuth 2 environment

<ul>
<li>Building a simple OAuth client</li>
<li>Building a simple OAuth protected resource</li>
<li>Building a simple OAuth authorization server</li>
<li>OAuth 2.0 in the real world</li>
</ul>
</li>
<li>Part 3 &ndash; OAuth 2 implementation and vulnerabilities

<ul>
<li>Common client vulnerabilities</li>
<li>Common protected resources vulnerabilities</li>
<li>Common authorization server vulnerabilities</li>
<li>Common OAuth token vulnerabilities</li>
</ul>
</li>
<li>Part 4 &ndash; Taking OAuth further

<ul>
<li>OAuth tokens</li>
<li>Dynamic client registration</li>
<li>User authentication with OAuth 2.0</li>
<li>Protocols and profiles using OAuth 2.0</li>
<li>Beyond bearer tokens</li>
<li>Summary and conclusions</li>
</ul>
</li>
</ul>


<!-- more -->


<p>まだ読んでないんですが、目次見る限り Part2 までは初心者向け、Part3 はセキュリティ厨の皆様向け、Part4 は ID 厨の皆様向けって感じでしょうか。</p>

<p>ちなみに Justin は、先日翻訳した <a href="https://oauth.jp/blog/2016/07/15/nist-800-63c/">NIST SP 800-63C</a> の英語版の著者の1人でもあり、Java の OpenID Connect 実装の1つである <a href="https://id.mitre.org/connect/">MITREid Connect</a> の中の人でもあります。</p>

<p>Part4 の OAuth Dynamic Client Registration に関しては、以下の2つの RFC の Editor です。</p>

<ul>
<li><a href="https://tools.ietf.org/html/rfc7591">OAuth 2.0 Dynamic Client Registration Protocol</a></li>
<li><a href="https://tools.ietf.org/html/rfc7592">OAuth 2.0 Dynamic Client Registration Management Protocol</a></li>
</ul>


<p>いままでの OAuth 2.0 関連の本よりだいぶガチな感じ。</p>

<p>OAuth の本見ると、一度書き始めて途中で挫折した過去 (OAuth1.0 の部分書き終えたとこで放置してるw) が蘇りますが、もぅこれ翻訳すりゃいんじゃね？っていうね。</p>

<p><a href="https://www.amazon.co.jp/OAuth-2-Action-Justin-Richer/dp/161729327X/ref=as_li_ss_il?ie=UTF8&qid=1491032403&sr=8-3&keywords=oauth&linkCode=li3&tag=bianca0b-22&linkId=99872d3ee518929dc6ee8ce757316cab" target="_blank"><img border="0" src="https://oauth.jp//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=161729327X&Format=_SL250_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=bianca0b-22" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=bianca0b-22&l=li3&o=9&a=161729327X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure AD B2C が外部 API 向けに払い出す JWT-formatted Access Token について]]></title>
    <link href="https://oauth.jp/blog/2017/03/24/azuread-b2c-jwt-accesstoken/"/>
    <updated>2017-03-24T17:08:00+09:00</updated>
    <id>https://oauth.jp/blog/2017/03/24/azuread-b2c-jwt-accesstoken</id>
    <content type="html"><![CDATA[<p><a href="https://azure.microsoft.com/ja-jp/blog/azure-ad-b2c-access-tokens-now-in-public-preview/">Azure AD B2C Access Tokens now in public preview</a></p>

<p>ということで、さわって見ました。</p>

<h2>Step.1 Azure AD B2C テナントの作成</h2>

<p>まずは Azure AD B2C テナントを作成します。なんか portal.azure.com から行くと Classic Portal ベースのドキュメントに飛ばされるので、新しい方の Portal ベースのドキュメントをリンクしときますね。</p>

<p><a href="https://docs.microsoft.com/en-us/azure/active-directory-b2c/active-directory-b2c-get-started">Azure Active Directory B2C: Create an Azure AD B2C tenant</a></p>

<p>テナントを Subscription と紐づけるとかいう処理は Production Use でない限り Skip で OK です。</p>

<h2>Step.2 Web API (Resource Server) および Client の登録</h2>

<p><a href="https://azure.microsoft.com/ja-jp/blog/azure-ad-b2c-access-tokens-now-in-public-preview/">Azure AD B2C Access Tokens now in public preview</a> にしたがって、Web API と Client を登録します。</p>

<p>Web API の登録には Scope の定義もセットです。</p>

<p>Client の登録には Key (Client Secret) の作成と利用可能な API &amp; Scope の設定がセットです。</p>

<p>ちなみに、Resource Server と Client がどちらも同じメニューから作成し、横並びで表示されるのはちょっと違和感ありますね。</p>

<p>Resource Server に Redirect URI (Reply URL) の登録が必須だったり、Implicit を使えるようにするかの選択は Client 側の設定項目で Resource Server 側にそれ設定してもなんの意味もなかったりというのは、MS さんらしいというかなんというか。</p>

<p>なお、</p>

<ul>
<li>App ID URI を登録した Application は固有の scope を定義できるようになり、Resource Server になれる。</li>
<li>App ID URI を登録しない Application は Key (Client Secret) しか作成できず、Client にしかなれない。</li>
<li>Resource Server は Key (Client Secret) も作成できるので同時に Client にもなれる。</li>
</ul>


<p>というルールになっているようですが、3つめの Resource Server かつ Client というのは同じ aud を持つ Access Token と ID Token が生成されることに繋がるので、よほどの事情がない限りやめるべきです。</p>

<!-- more -->


<h2>Step.4 Policy の作成</h2>

<p>Azure AD B2C に外部 Resource Server 向けの JWT 形式の Access Token を払い出させるには、Policy ID を指定しないといけません。</p>

<p>理由は不明ですが、MS さんがそういうのだから仕方ない。</p>

<p>ということで、なんか適当に Sign-in Policies というところに Policy を登録します。</p>

<p>Policy 登録終わると「Metadata Endpoint for this policy」とかいう URL が表示され、そこにアクセスすると OpenID Connect Provider Configuration Document (JSON) が得られます。</p>

<p>OpenID Connect Discovery では Query Parameter とかサポートしてないはずですが、Policy ID (p=xxx) が Query についてるのは MS さんの悪い癖で、なんかやめられない感じなんでしょう。</p>

<p>この Policy は Resource Server ごとに指定するものでも無いようなんで、まぁデフォルトのまま放置して Policy ID だけ取得しとけば OK です。</p>

<h2>Step.3 Access Token の取得</h2>

<p>この Gist に適宜自分で作った Client ID やらなんやら指定してやれば、HTTP のやりとりなどが Console に表示されるんで、それ見ながらフロー確認してください。</p>

<p><a href="https://gist.github.com/nov/0673c8ad02e23a875f05b2be43dd040a">azure_ad_b2c_without_credentials.rb</a></p>

<p>また、もろもろの Azure AD B2C 環境セットアップがめんどくさいという方の為に、こちらに僕が作った RS &amp; Client を Client Secret 含め置いておきます。</p>

<p><a href="https://gist.github.com/nov/9e9b537b897fa2585e085ab1b83b2e3d">azure_ad_b2c.rb</a></p>

<p>動作確認用のユーザーも作っておきましたので、これが正常に動いてる間はご自由にお使いください。</p>

<p>Username: <a href="&#x6d;&#x61;&#105;&#108;&#x74;&#111;&#58;&#121;&#111;&#117;&#x40;&#115;&#x74;&#115;&#x34;&#98;&#50;&#99;&#46;&#x6f;&#110;&#x6d;&#x69;&#99;&#x72;&#x6f;&#115;&#111;&#102;&#x74;&#x2e;&#x63;&#111;&#109;">&#121;&#x6f;&#117;&#64;&#x73;&#116;&#115;&#52;&#98;&#50;&#99;&#46;&#111;&#x6e;&#109;&#x69;&#99;&#114;&#111;&#x73;&#111;&#x66;&#116;&#x2e;&#x63;&#x6f;&#109;</a>
Password: ]6]yzxXYG7uruM4p</p>

<p>動かなくなったら、あきらめて自分で Azure AD B2C 環境セットアップしてください。</p>

<h2>わかったこと</h2>

<ul>
<li>Access Token の audience は Resource Server Application の Object ID。</li>
<li>Access Token の audience は Array にはできない。

<ul>
<li>複数 Resource Server にまたがった Access Token は発行できず、そのような Scope の指定の仕方した時点でエラーになります。</li>
<li>これはセキュリティ的には良いことですね。</li>
</ul>
</li>
<li>ID Token と Access Token の署名鍵は同じ。

<ul>
<li>これはお行儀悪いですね。</li>
<li>Resource Server が Client を兼ねた場合、署名鍵や audience だけではその JWT が Access Token なのか ID Token なのか区別できないケースが発生し、脆弱性につながりかねません。</li>
</ul>
</li>
<li>&ldquo;openid&rdquo; 以外の Scope を指定しないと Token Response に access_token が含まれない。

<ul>
<li><a href="https://tools.ietf.org/html/rfc6749#section-4.2.2">RFC 6749</a> に違反しており、利用しているライブラリによってはユーザーが Query 書き換えただけで Client 側で 500 エラー発生させたりできそうです。</li>
</ul>
</li>
</ul>


<p>ということで、ここで発行された Access Token を受け取った Resource Server は、</p>

<ul>
<li>署名が正しく</li>
<li>JWT の &ldquo;aud&rdquo; Claim が自身の Azure AD B2C 上の Object ID であり</li>
<li>必要な Scope が &ldquo;scp&rdquo; Claim に含まれており</li>
<li>&ldquo;azp&rdquo; Claim に含まれる Client ID が正当な Client のものであり

<ul>
<li>余談ですが同じく MS さんが主導の <a href="https://tools.ietf.org/html/draft-ietf-oauth-token-exchange-07#section-4.3">OAuth 2.0 Token Exchange</a> では &ldquo;cid&rdquo; Claim なのに、ここでは &ldquo;azp&rdquo; なのはなんというか&hellip;w</li>
</ul>
</li>
<li>期限切れでない</li>
</ul>


<p>ことを確認する感じになりますね。</p>

<p>今日のところは以上です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub Business Plan 登場、GitHub.com ドメインで SCIM と SAML をサポート。]]></title>
    <link href="https://oauth.jp/blog/2017/03/07/github-support-saml-and-scim/"/>
    <updated>2017-03-07T21:18:00+09:00</updated>
    <id>https://oauth.jp/blog/2017/03/07/github-support-saml-and-scim</id>
    <content type="html"><![CDATA[<p>オンプレサーバーで GitHub Enterprise をお使いのみなさま。</p>

<p>日々オンプレサーバーのメンテ、おつかれさまです。</p>

<p>GitHub.com の Business Plan っての、良さそうですよね。</p>

<p>SCIM と SAML サポートしてて、いままでオンプレ版でしかできなかった Provisioning と Federation (SSO といった方が伝わるか？) が、GitHub.com ドメインでできるようになったんですよ。</p>

<p>これで GitHub.com が生きてればいつでも Deploy できますよ。</p>

<p>死ぬもんね、オンプレ。てか、一旦死んだら結構しばらくの間死ぬもんね、オンプレ。</p>

<p>GitHub.com なら、AWS が生き返ればきっと生き返るよ。</p>

<p>ということで、Business Plan の SAML と SCIM、ちょっと試してみましたよ。</p>

<h1>SAML 設定</h1>

<p>GitHub Help の <a href="https://help.github.com/articles/managing-member-identity-and-access-in-your-organization-with-saml-single-sign-on/">この一連のドキュメント</a> を読む限り、SAML 設定しないと SCIM 使えないようです。</p>

<p>あ、SAML の SP Entity ID とかはドキュメントには書いてないです。</p>

<p>Business Plan 契約して設定画面行かないと、SP Entity ID も Assertion Consumer Service (ACS) URL もわかんないです。</p>

<p>まず金払ってからしか試せません。</p>

<p><strong>ファーストひどい。</strong></p>

<!-- more -->


<p>で、金払って Organization の Security 設定ページ (<a href="https://github.com/organizations/YOUR-ORGANIZATION/settings/security">https://github.com/organizations/YOUR-ORGANIZATION/settings/security</a>) にアクセスすると、SAML 設定が ON にできるようになってます。</p>

<p>ここに以下の情報が表示されています。</p>

<ul>
<li>Organization single sign-on URL

<ul>
<li><a href="https://github.com/orgs/YOUR-ORGANIZATION/sso">https://github.com/orgs/YOUR-ORGANIZATION/sso</a></li>
</ul>
</li>
<li>Assertion consumer service URL

<ul>
<li><a href="https://github.com/orgs/YOUR-ORGANIZATION/saml/consume">https://github.com/orgs/YOUR-ORGANIZATION/saml/consume</a></li>
</ul>
</li>
</ul>


<p>あれ？SP Entity ID は？と思ったそこのあなた。</p>

<p>SP Entity ID はここには記載されていません。</p>

<p><strong>セカンドひどい。</strong></p>

<p>実際 SAML Request を発行させてみないとわからないっぽいんですが、面倒なんでここに書いときますね。</p>

<ul>
<li>SP Entity ID

<ul>
<li><a href="https://github.com/orgs/YOUR-ORGANIZATION">https://github.com/orgs/YOUR-ORGANIZATION</a></li>
</ul>
</li>
</ul>


<p>です。</p>

<p>で、これらを元に IdP 側に SP 登録して、その後 GitHub 側で以下の情報を入力すると、SAML 設定自体は完了です。</p>

<ul>
<li>Sign on URL</li>
<li>Issuer (IdP Entity ID)</li>
<li>Public Certificate (IdP Certificate)</li>
</ul>


<p>え？NameID Format はって？</p>

<p>えぇ、特にドキュメントにも設定画面にも指定ないですね。</p>

<p>そう、特にドキュメントにも設定画面にも指定ないです。</p>

<p><strong>サードひどい。</strong></p>

<p>Business Plan になってからサポートに問い合わせたら、Gist に書かれたドキュメントが送られて来て、そこには NameID Format は Email だよって書いてあったんで、Email 推奨のようです。</p>

<p>が、実は UUID とか指定しても動きます。</p>

<p>あと、Email 指定してもそのメアドのユーザーにログインできるわけでもないです。</p>

<p><a href="&#109;&#97;&#x69;&#x6c;&#116;&#x6f;&#58;&#110;&#111;&#x76;&#64;&#x65;&#x78;&#x61;&#x6d;&#112;&#x6c;&#101;&#46;&#x63;&#111;&#x6d;">&#110;&#x6f;&#x76;&#x40;&#101;&#120;&#x61;&#x6d;&#x70;&#x6c;&#x65;&#x2e;&#x63;&#x6f;&#109;</a> の NameID を持つ SAML Assertion で、<a href="&#x6d;&#x61;&#105;&#108;&#116;&#x6f;&#x3a;&#x6e;&#111;&#x76;&#64;&#109;&#97;&#x74;&#97;&#x6b;&#x65;&#x2e;&#106;&#112;">&#110;&#111;&#x76;&#x40;&#x6d;&#x61;&#x74;&#97;&#107;&#101;&#46;&#x6a;&#112;</a> の GitHub アカウントにログインできたりします。</p>

<p>SAML Federation とか言うてるけど、結局既存の GitHub.com アカウントに SAML IdP 側のアカウントを Link するだけなんですよ。</p>

<p>その紐付けは、SAML での初回ログイン時に GitHub.com 側の ID &amp; Password 入力して行います。</p>

<p>つまり、<a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#x3a;&#110;&#x6f;&#x76;&#64;&#101;&#120;&#x61;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#x6d;">&#110;&#111;&#118;&#x40;&#101;&#120;&#x61;&#x6d;&#112;&#108;&#101;&#46;&#x63;&#x6f;&#x6d;</a> の NameID を持つ SAML Assertion をどの GitHub アカウントに紐づけるかは、エンドユーザーが決定権を持っています。</p>

<p>情シスじゃないです。</p>

<p><strong>フォースひどい。てかお前それ致命的やろ。</strong></p>

<p>ちなみに、NameID は不変かつ同一 IdP 内でユニークでさえあればなんでもいいです。</p>

<p>Email 推奨してたドキュメントは、多分なんか気分的に Email のがいんじゃね？くらいのノリだったんだと思います。</p>

<p>実際には NameID Format が Persistent で NameID が UUID、とかにしても普通に動いてました。</p>

<h2>SCIM 設定</h2>

<p>SCIM にいたっては、一切のドキュメントが公開されていません。</p>

<p>GitHub が公式サポートをうたう OneLogin から GitHub.com を選んで設定してみましたが、OneLogin 側に設定が必要な SCIM Base URL の値すらどこにも書いてありません。</p>

<p><strong>もうひどいカウントやめていいですか？</strong></p>

<p>はい、サポートに問い合わせて聞いたら Gist のドキュメント送られて来ます。</p>

<p>普通に SCIM Base URL 書いてあります。</p>

<ul>
<li>SCIM Base URL

<ul>
<li><a href="https://api.github.com/scim/v2/organizations/YOUR-ORGANIZATION">https://api.github.com/scim/v2/organizations/YOUR-ORGANIZATION</a></li>
</ul>
</li>
</ul>


<p>で、ここに <code>admin:org</code> scope 持つ OAuth2 Token を添えて SCIM API Request 送ってやればいいです。</p>

<p>あ、どの属性が必須かって？</p>

<p>Gist ドキュメントもらえば書いて&hellip;ないですけど、API リクエスト送り続けてエラー見続けたらそのうちわかります。</p>

<p>ということで、現状の挙動見る限り、必須な SCIM User Attributes は以下の通りです。</p>

<ul>
<li>id</li>
<li>userName (email)</li>
<li>name

<ul>
<li>familyName</li>
<li>givenName</li>
</ul>
</li>
<li>emails (userName と同じメアドを primary に)</li>
</ul>


<p>はい、ドキュメントさえあれば、プロビジョニングなんて簡単ですよ。</p>

<p>で、プロビするじゃないですか？</p>

<p>さすがにプロビしたアカウントに関しては、SAML で NameID にそのメアド指定したら GitHub.com アカウントとの紐付けとかなくするっとログインできると思うじゃないですか？</p>

<p>はい、SAML 初回ログイン時にアカウント紐付け必須です。</p>

<p>てかそもそも SAML Assertion に指定されるメアドと GitHub.com アカウントのメアドが一致する必要はないので、SCIM でプロビしたアカウントに別メアドの SAML Assertion 送りつけて紐付けたりもできます。</p>

<p><strong>お前それ致命的やろ。</strong></p>

<p>よくそれで月額 <strong>$21/user</strong> も取れると思ったな。</p>

<p>いや、Business Plan アカウントに対するサポートからの回答速度は爆速ですけど。</p>

<p>1時間もしないうちに回答きますけど。</p>

<p>そこはすばらしいですけど。</p>

<p><strong>お前それ致命的やろ。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOS Sierra (10.12.x) でマイナポータルにログイン]]></title>
    <link href="https://oauth.jp/blog/2017/01/26/myna-on-mac-os-sierra/"/>
    <updated>2017-01-26T21:37:00+09:00</updated>
    <id>https://oauth.jp/blog/2017/01/26/myna-on-mac-os-sierra</id>
    <content type="html"><![CDATA[<p>お久しぶりです、nov です。</p>

<p>おかげで無事12月末で <a href="http://yauth.jp">YAuth.jp</a> も初年度を終え、2期目に突入しております。</p>

<p>MVP は意気込み送ってこいや的なメールが来ており、いいかげんそろそろ Windows 10 でドメインジョイン (正直 UX とかよくわかってない) せんとなぁとか思いつつ、今日は MacOS です。</p>

<p>MacOS でマイナポータルにログインするお話です。</p>

<p>みなさん、知ってましたか？マイナポータルって OpenID Connect の IdP なんですよ！もしかしたら Access Token とか払い出しちゃう機能なんかもあるんですよ！</p>

<p>ということで、まぁその辺を調べるにも、ログインせんことには何も始まりません。</p>

<p><strong>え？マイナンバーカード持ってないだって？？んなやつぁしらん！！！</strong></p>

<p>そんな人は <a href="https://openid-foundation-japan.github.io/800-63-3/index.ja.html">NIST SP 800-63-3 翻訳版</a> でも読んで、Identity Proofing とかハードウェアトークンとかに思いをはせつつ市役所いって取って来てください。</p>

<p>マイナンバーカード取る時、NIST SP 800-63-3 の3ページ目テストに出ますからね。</p>

<!-- more -->


<p><em>嘘です。</em></p>

<h2>MacOS Sierra でマイナポータルにログイン</h2>

<p>さて、Windows 10 でログイン、できるに決まってますよね。</p>

<p>e-Tax にログインできるんなら、おなじような仕組みのマイナポータルにだってログインできるに決まってます。</p>

<p>ということで、今日は e-Tax から見放された MacOS Sierra でマイナポータルにログインしてみましょう。</p>

<p>クソ長い PDF を真面目に読まれる方は、<a href="https://myna.go.jp/SCK0101_03_001/SCK0101_03_001_Init.form">公式マイナポータルログイン手順</a> をご覧ください。</p>

<h3>カードリーダー買う &amp; ドライバーインストール</h3>

<p>マイナンバーカードリーダーのアフィリンクを貼りたいがためにこの記事を書いているといっても過言ではありません。</p>

<p>このサンワサプライのカードリーダーは、<a href="https://www.sanwa.co.jp/support/download/dl_driver_ichiran.asp?code=ADR-MNICUBK">MacOS Sierra 対応のドライバ</a> あります。</p>

<p><a href="http://amzn.to/2j7WSEx"><img src="https://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=B01M2DJ9WG&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=bianca0b-22" alt="サンワサプライ 接触型ICカードリーダライタ ADR-MNICUBK" /></a></p>

<p>マイナポータル公式の対応カードリーダー表には El Capitan の欄はあるけど Sierra の欄がなく、そこみてもどれが Sierra 対応なのかよくわかりません。</p>

<p>NTT コミュニケーションズのやつはドライバが El Capitan までだったりしたので、Sierra 対応カードリーダー選ぶのが最初のハードルです。</p>

<p>さて、Amazon さんから <a href="http://amzn.to/2j7WSEx">サンワサプライ 接触型ICカードリーダライタ ADR-MNICUBK</a> 届いたら、Sierra 対応のドライバインストールしてください。</p>

<p>この記事執筆時点では、以下の一番下のやつです。</p>

<p><a href="https://www.sanwa.co.jp/support/download/dl_driver_ichiran.asp?code=ADR-MNICUBK"><img src="https://oauth.jp/images/posts/myna/card-reader-drivers.png" alt="ADR-MNICUBK Deivers" /></a></p>

<p>これでカードリーダーのセットアップは完了です。</p>

<h3>Java 8 Update 121 にアップデート</h3>

<p><a href="https://img.myna.go.jp/html/dousakankyou.html">マイナポータル動作環境について</a> によると、Java Version 8 Update 111 以上が必要なようです。</p>

<p>あと、Java のアップデートするたびに、ポリシーファイルとかいうのが書き換えられて、再度なんか設定し直しらしいです。</p>

<p>ということで、とりあえず現時点での最新の Java 入れときましょう。</p>

<p><img src="https://oauth.jp/images/posts/myna/java8-121.png" alt="Java 8 Update 121" /></p>

<p>Oracle Java 入れたことあれば　MacOS の設定アプリに屈辱の &ldquo;Java&rdquo; メニュー現れてるはずなんで、そっからアップデートできるはずです。</p>

<p>入れたこと無い人は、&#8221;MacOS Java 8&#8221; とかでググるなりして入れてください。</p>

<p>屈辱です。</p>

<h3>JPKI 利用者クライアントソフトのインストール &amp; 初期設定</h3>

<p>続いて <a href="https://img.myna.go.jp/html/dousakankyou.html">マイナポータル動作環境について</a> の「JPKI利用者クライアントソフトの準備」からもリンクされてる <a href="https://www.jpki.go.jp/download/index.html">JPKI利用者クライアントソフト</a> の MacOS 版をインストールします。</p>

<p>こいつはちょっと時代の流れに付いてくるのがゆっくりなので、「JRE 8.0 Update111」を推奨して来ますが、Java 8 Update 121 では少なくとも動きます。</p>

<p>あ、あと「Smart Card Services」は入れちゃダメです！</p>

<p>いや、不要なだけで入れてもいいのかもです。</p>

<p>まぁとにかくマイナンバーカード使う場合は「Smart Card Services」はいりません。</p>

<p>ということで、入れるのは　<a href="https://www.jpki.go.jp/download/mac.html">JPKI利用者クライアントソフト &ndash; Macintosh をご利用の方</a> の一番下の方の「利用者クライアントソフトのダウンロード」ってとこにリンクされてるやつです。</p>

<p><em>いや、ダウンロードリンク下すぎでしょ。</em></p>

<p>で、インストール終わるとこんなの出て来ます。</p>

<p>よくわかんないけど「はい」にしときましょう。</p>

<p><img src="https://oauth.jp/images/posts/myna/jpki-cert-expiry-notification.png" alt="JPKI 証明書有効期限通知設定" /></p>

<p>Retina 対応してないやつ、久々にみました。</p>

<p>最後にインストールされた全アプリが表示されます。</p>

<p><img src="https://oauth.jp/images/posts/myna/jpki-applications.png" alt="JPKI アプリ一覧" /></p>

<p>この中の「Java実行環境への登録」ってのだけ実行しといてください。</p>

<h3>マイナポータル環境設定プログラムのインストール &amp; 設定</h3>

<p>さて、JPKI 利用者クライアントソフトの設定が終わったら、また <a href="https://img.myna.go.jp/html/dousakankyou.html">マイナポータル動作環境について</a> に戻って、今度は「マイナポータル環境設定プログラムの実施」ってとこから「<a href="https://img.myna.go.jp/tools/mac/MyNASetup.pkg">環境設定プログラム (Mac 用)</a>」をインストールします。</p>

<p>こいつはインストール後に特に何かを主張したりはしません。</p>

<h3>ブラウザの制限をちょっと弱める</h3>

<p>最後に <a href="https://img.myna.go.jp/manual/2.pdf">マイナポータル環境設定プログラム &ndash; ご利用方法マニュアル</a> の P.20〜P.25 だけちゃんと読みながら、ブラウザのセキュリティ制限を少しずつ弱めます。</p>

<p>P.24 の「安全でないモード」とか、なんていう裏技感。</p>

<p>あ、ちなみに Chrome はサポートされてません。</p>

<p>Safari 使ってください。</p>

<h3>いよいよマイナポータルログイン</h3>

<p>さて、ここまで設定できたら、Safari を再起動して、マイナポータルトップ画面のログインボタンをクリックしてください。</p>

<p>マイナンバーカード取得時に設定した PIN コードの入力を求める Popup が出て来たら、成功です。</p>

<p><img src="https://oauth.jp/images/posts/myna/myna-pin-input.png" alt="マイナポータルログイン" /></p>

<p>PIN を入れてログイン成功したことを確認したら、あとはご自由にマイナポータルで遊んでみてください。</p>

<p>特にまだ何ができるわけでもないですけどね。</p>

<h3>最後に</h3>

<p>ここまで来たあなたは、ブラウザのセキュリティ制約をいくつか解除してしまっています。</p>

<p>マイナポータルに満足したら、ちゃんと元どおり 3rd-party Cookie は「閲覧した Web サイトは許可」、Popup はブロック、Java プラグインは無効化しておきましょう。</p>

<p>いや、もっと厳しくしてもいいし、そのまんまでいいならそれも自己判断でいいんですけどね。</p>

<p>では、素敵なマイナライフを！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTPS でも Full URL が漏れる？OAuth の code も漏れるんじゃね？？]]></title>
    <link href="https://oauth.jp/blog/2016/07/27/https-full-url-leaks/"/>
    <updated>2016-07-27T10:48:00+09:00</updated>
    <id>https://oauth.jp/blog/2016/07/27/https-full-url-leaks</id>
    <content type="html"><![CDATA[<p>なんですかこれは！</p>

<p><a href="http://arstechnica.com/security/2016/07/new-attack-that-cripples-https-crypto-works-on-macs-windows-and-linux/">New attack bypasses HTTPS protection on Macs, Windows, and Linux</a></p>

<p>DHCP につなぐと PAC ファイルがダウンロードされて HTTPS であろうとアクセス先の Full URL は漏れるですって？</p>

<p>Web Proxy Autodiscovery ですって？</p>

<p>チョットニホンゴデオネガイシマス</p>

<p>ってことで、まぁこれが実際どれくらい簡単に実現できる攻撃パターンなのかは他のセキュリティ業界の方々に後で聞くとして、この記事でも触れられてる OpenID Connect とか OAuth2 への影響について、ちょっとまとめておきましょうか。</p>

<h2>Authorization Request &amp; Response が漏れる</h2>

<p><code>response_mode=form_post</code> なんていうのも一部ありますが、基本 OAuth2 / OpenID Connect の Authorization Request &amp; Response は GET です。</p>

<p>Implicit Flow の場合は Response Parameter が URL Fragment についてるので、Server に送られる Full URL が漏れたところで特に URL Fragment の内容は漏れないですが、Code Flow の場合は Response の Query についてる Authorization Code は漏れますね。</p>

<p>まぁ Authorization Request に含まれる <code>state</code> とかも漏れますが、今回のケースだと Cookie とかは漏れないんで、<code>state</code> が漏れること自体は大して問題ではないでしょう。</p>

<p>ただ、Redirect URL に HTTPS 使っても <code>code</code> 漏れるってのは、辛そうですね。</p>

<h2>Authorization Code が漏れたらどうなるの？</h2>

<p>Code 置換攻撃 (Code Cut &amp; Paste Attack) が可能になります。</p>

<p>ここに漏れた <code>code</code> があるとしましょう。すると、以下の手順で攻撃者は <code>code</code> 所有者の RP 上のアカウントにログインすることができます。</p>

<ol>
<li>攻撃者自身のブラウザで Authorization Request 発行</li>
<li>攻撃者自身の IdP 上のアカウントで IdP にログイン</li>
<li>Authorization Response を途中で止める</li>
<li>Authorization Response 中に含まれる <code>code</code> を被害者のものに置換 (<code>state</code> は置換しない)</li>
<li>Code 置換済の Authorization Response を RP に送る</li>
</ol>


<p>こうすると、RP が <code>state</code> を使った CSRF 対策を行っていても、RP は受け取った <code>code</code> を使って攻撃者を被害者としてログインさせてしまいます。</p>

<p>これが Code 置換攻撃です。</p>

<p>では、これを防ぐ手立てはあるのでしょうか？</p>

<!-- more -->


<h2>OpenID Connect の場合 : ID Token の nonce をチェック</h2>

<p>OpenID Connect では、Authorization Request で <code>nonce</code> というパラメータを送ることができますね。</p>

<p>あれは <code>state</code> とよく似た役割を果たしますが、<code>code</code> とは紐付かない <code>state</code> と異なり、<code>nonce</code> は <code>code</code> と紐づいて保存され、最終的に発行される ID Token に含まれて返ってきます。</p>

<p>よって、<code>code</code> だけ置換しても、<code>nonce</code> に紐付いた Cookie なりを奪わない限り、RP が Token Endpoint から返ってきた <code>nonce</code> をチェックした時点で <code>code</code> 置換を検知できることになります。</p>

<p>ようするに、OpenID Connect の仕様的には OPTIONAL やけど、とりあえず <code>nonce</code> 使っとけや、ってことですね。</p>

<h2>OAuth 2.0 の場合 (1) : PKCE 拡張を使う</h2>

<p><code>nonce</code> のない OAuth 2.0 の場合、Authorization Request &amp; Response のセッションと <code>code</code> を紐付けるパラメータが特にありません。</p>

<p>そして、それでは Code 置換攻撃は防げません。</p>

<p>よって、<code>code</code> と紐付いたパラメータを用意してやる必要があります。</p>

<p>OpenID Foundation Japan 事務局長としては「OpenID Connect 使えや」って話でもあるわけですが、もうちょっとお手軽な方法としては <a href="https://tools.ietf.org/html/rfc7636">OAuth PKCE</a> というのもあります。</p>

<p>PKCE はもともと <code>client_secret</code> を持てない OAuth Client 向けに作られた仕様ですが、Authorization Request で送った <code>code_challenge</code> と紐づく <code>code_verifier</code> を Token Endpoint に送ることになるので、当然ながら IdP 側では <code>code</code> と <code>code_challenge</code> を紐付けて管理することになります。</p>

<p>つまり、<code>code</code> を置換すると、<code>code_verifier</code> が合わなくなって、Token Request が失敗する、と。</p>

<p>ちなみに、PKCE には <code>code_challenge_mode</code> っていうパラメータがありますが、<code>code_challenge_mode=plain</code> は Authorization Request みれる状況では <code>code_verifier</code> 自体が漏れることになるんでダメで、この攻撃防ぐためには <code>S256</code> を使ってくださいね。</p>

<p>さて、これで OAuth 2.0 でも Code 置換攻撃、防げましたね。</p>

<p>これからは Confidential Client (<code>client_secret</code> 持てる OAuth Client) でも PKCE 使えってことですね。</p>

<p>ただ PKCE は OAuth 拡張なんで、OAuth Server (IdP) 側がまず PKCE 対応する必要があります。</p>

<p>Facebook Login とか使ってる人たちは、どうすればいいんでしょうねぇ〜</p>

<h2>OAuth 2.0 の場合 (2) : response_mode=form_post を使う (Thanks to @zigorou)</h2>

<p>PKCE 同様 <code>response_mode=form_post</code> も拡張仕様なのでどの OAuth Server (IdP) でも使えるわけではないですが、<code>response_mode=form_post</code> を使うと Authorization Code は POST Body に含まれて返されるので、Full URL が漏れても <code>code</code> は漏れません。</p>

<p>Session と紐付けた <code>nonce</code> なり <code>code_verifier</code> なりを管理するより、RP にとっては <code>response_mode=form_post</code> を使うほうが楽かもしれませんね。</p>

<p>「Session と紐付ける」って概念、意外に通じないことも多いですし。</p>

<h2>まとめ</h2>

<p>OpenID Connect を使ってる場合は、RP が常に <code>nonce</code> 使えばいいだけなんで、RP だけが注意してれば大丈夫ですね。</p>

<p>OAuth 2.0 を使ってる場合は、OAuth Server (IdP) 側がまず PKCE なり OpenID Connect なりに対応して、RP がそれを使う必要がありそうです。</p>

<p><strong>Facebook のみなさん、聞こえますかぁ〜</strong></p>

<p>ps.</p>

<p>「OAuth 2.0 の場合」というセクションタイトルになってますが、OpenID Connect でも nonce の代わりに PKCE なり response_mode=form_post 使ってもいいです。</p>

<p>OAuth 2.0 のレベルで解決できてるなら、OpenID Connect 特有のパラメータを利用しなくても (この攻撃は) 防げます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NIST 800-63C を翻訳しました]]></title>
    <link href="https://oauth.jp/blog/2016/07/15/nist-800-63c/"/>
    <updated>2016-07-15T15:06:00+09:00</updated>
    <id>https://oauth.jp/blog/2016/07/15/nist-800-63c</id>
    <content type="html"><![CDATA[<p>先日このブログでも紹介した <a href="https://oauth.jp/blog/2016/07/01/jwk-and-oauth-revocation-translated/">OAuth Revocation, JWK JWK Thumbprint 仕様の翻訳版</a> に引き続き、OpenID Foundation Japan 翻訳・教育 WG リーダーとしての Nov です。</p>

<p>先日 <a href="https://www.facebook.com/OpenIDTrans/posts/1226159194083566">翻訳 WG の Facebook Page</a> でも告知したように、現在 <a href="https://pages.nist.gov/800-63-3/">NIST SP 800-63-3 &ndash; Digital Authentication Guideline</a> の翻訳を開始しています。</p>

<p>今日はその中から、すでに翻訳が完了している <a href="https://openid-foundation-japan.github.io/800-63-3/sp800-63c.ja.html">NIST SP 800-63C &ndash; Federation and Assertions</a> のご紹介です。</p>

<h2>Level of Assurance</h2>

<p>プロフェッショナルなみなさまのことです、すでに Level of Assurance とか LoA とかいう単語を耳にしたこともおありでしょう。</p>

<p>NIST SP 800-63 は、LoA の各レベルでの要求事項を具体的に定めている NIST (米国国立標準技術研究所) の公式ドキュメントで、800-63-3 はその Revision 3 です。</p>

<p>Revison 3 では、Revision 2 まで単一のドキュメントだった 800-63 を、以下の4つに分割しています。</p>

<ul>
<li>SP 800-63-3 (Digital Authentication Guideline)</li>
<li>SP 800-63A (Identity Proofing &amp; Enrollment)</li>
<li>SP 800-63B (Authentication &amp; Lifecycle Management)</li>
<li>SP 800-63C (Federation &amp; Assertions)</li>
</ul>


<p>そして LoA も3つの Assurance Levels に分割し、それぞれをレベル分けした上で、それぞれのレベルの組み合わせを持って LoA を定義しています。</p>

<ul>
<li>Identity Assurance Level (IAL, Lv.1 &ndash; Lv.3 までの3段階)</li>
<li>Authenticator Assurance Level (AAL, Lv.1 &ndash; Lv.3 までの3段階)</li>
<li>Federation Assurance Level (FAL, Lv.1 &ndash; Lv.4 までの4段階)</li>
</ul>


<p>LoA 自体は今まで通り Lv.1 &ndash; Lv.4 までの4段階で、それぞれの LoA に求められる IAL, AAL, FAL のレベルは以下の通りとなっています。</p>

<table>
<thead>
<tr>
<th></th>
<th> LOA </th>
<th> IAL </th>
<th> AAL </th>
<th> FAL </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>  1  </td>
<td>  1  </td>
<td>  1  </td>
<td>  1</td>
</tr>
<tr>
<td></td>
<td>  2  </td>
<td>  2  </td>
<td> 2 or 3 </td>
<td>  2</td>
</tr>
<tr>
<td></td>
<td>  3  </td>
<td>  2  </td>
<td> 2 or 3 </td>
<td>  2</td>
</tr>
<tr>
<td></td>
<td>  4  </td>
<td>  3  </td>
<td> 3 </td>
<td>  4</td>
</tr>
</tbody>
</table>


<p>LoA Lv.2.5 とか、Lv.1+ とか、謎のオレオレ定義が乱立してた LoA の定義も、こういう仕組みで多少はフィレキシブルに扱えるように&hellip;</p>

<p>ま、なるといいですね。</p>

<h2>Federation Assurance Level (FAL)</h2>

<p>で、上記のうち FAL を定義しているのが、<a href="https://openid-foundation-japan.github.io/800-63-3/sp800-63c.ja.html">NIST SP 800-63C &ndash; Federation and Assertions</a> です。</p>

<p>800-63C では、Assertion と Federation Protocol のレベル分けのために、それらの特徴を複数のカテゴリに渡って分類し、それらの組み合わせによって FAL を定義しています。</p>

<table>
<thead>
<tr>
<th></th>
<th> FAL </th>
<th> Requirement </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>  1  </td>
<td> Bearer assertion, direct presentation, asymmetrically signed by CSP</td>
</tr>
<tr>
<td></td>
<td>  2  </td>
<td> Bearer assertion, indirect presentation, asymmetrically signed by CSP</td>
</tr>
<tr>
<td></td>
<td>  3  </td>
<td> Bearer assertion, indirect presentation, asymmetrically signed by CSP and encrypted to RP</td>
</tr>
<tr>
<td></td>
<td>  4  </td>
<td> Holder of key assertion, indirect presentation, asymmetrically signed by CSP and encrypted to RP</td>
</tr>
</tbody>
</table>


<p>Bearer か Holder-of-Key かとか、Direct か Indirect か (Artifact 使うか使わないか) とか、署名のみか署名後暗号化するかとか、プロフェッショナルなみなさまにはたまらないですよね！</p>

<p>ってことで、プロフェッショナルなみなさまにおかれましては、ぜひ翻訳版読んでいただいて、<a href="https://github.com/openid-foundation-japan/800-63-3">日本語版の GitHub Repository</a> へのフィードバックお待ちしております！</p>

<p>あと NIST 本家の英語版も絶賛更新中らしいんで、<a href="https://github.com/usnistgov/800-63-3">英語語版の GitHub Repository</a> にもフィードバックしてあげると喜ばれると思います！</p>

<p>僕も3箇所ほどフィードバックして見ましたが、特に報告者の国籍等は関係無く反応返ってくるので、どっかのパブコメよりはよっぽど&hellip;おっと、誰か来たようだ。</p>

<h2>残りの 800-63-3, 800-63A, 800-63B について</h2>

<p>絶賛翻訳中です。</p>

<p>NIST 800-63-3 シリーズはセクションごとにファイルが分割していて翻訳箇所の並列化がしやすくなってるので、翻訳手伝ってくれるひとはまだまだ募集してます。</p>

<p>応募方法は <a href="https://www.facebook.com/OpenIDTrans/posts/1226159194083566">翻訳 WG の Facebook Page</a> をご覧ください。</p>

<p>じっくりドキュメントを読み込みたい方には、翻訳とかいい機会だと思いますよ！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Office 365 と外部 SAML IdP との連携設定]]></title>
    <link href="https://oauth.jp/blog/2016/07/01/o365-saml-federation/"/>
    <updated>2016-07-01T11:03:00+09:00</updated>
    <id>https://oauth.jp/blog/2016/07/01/o365-saml-federation</id>
    <content type="html"><![CDATA[<p>どうも、事務局長の Nov です。</p>

<p>どうも、ジムキョクチョのノブです。</p>

<p>どうも、ノブキョクチョです。</p>

<p>どうも、のぶチョです。</p>

<p>そう、のぶ千代です。</p>

<p>最近歳のせいか、Rails で SAML IdP とか作ってます。</p>

<p>今日は自作 SAML IdP を Office 365 と連携させてみたので、その格闘の記録を残しておきます。</p>

<p>Office 365 の制約とか Azure AD の制約とか全く前提知識なしに格闘した記録なんで、そういうのいいから手っ取り早くやり方教えろやって人は我らがふぁらおぅ兄さんのこちらの連載をご覧ください。</p>

<ul>
<li><a href="http://idmlab.eidentity.jp/2014/11/office365azureadopenamid.html">Office365/AzureAD &ndash; OpenAMとのID連携 (1)</a></li>
<li><a href="http://idmlab.eidentity.jp/2014/12/office365azureadopenamid.html">Office365/AzureAD &ndash; OpenAMとのID連携 (2)</a></li>
<li><a href="http://idmlab.eidentity.jp/2014/12/office365azureadopenamid_25.html">Office365/AzureAD &ndash; OpenAMとのID連携 (3)</a></li>
</ul>


<p>あとはこの本もおすすめ。</p>

<p><a href="https://www.amazon.co.jp/%E8%84%B1%E3%82%AA%E3%83%B3%E3%83%97%E3%83%AC%E3%83%9F%E3%82%B9-%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E6%99%82%E4%BB%A3%E3%81%AE%E8%AA%8D%E8%A8%BC%E5%9F%BA%E7%9B%A4-Active-Directory-%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%BD%E3%83%95%E3%83%88%E9%96%A2%E9%80%A3%E6%9B%B8-ebook/dp/B01IB6Q79W/ref=as_li_ss_il?ie=UTF8&qid=1491030816&sr=8-7&keywords=azure&linkCode=li3&tag=bianca0b-22&linkId=6d34dacc7b28dbb8de4dc560a0ad084f" target="_blank"><img border="0" src="https://oauth.jp//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B01IB6Q79W&Format=_SL250_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=bianca0b-22" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=bianca0b-22&l=li3&o=9&a=B01IB6Q79W" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<!-- more -->


<h2>Office 365 &amp; Azure AD のドメインが違う問題</h2>

<p>僕、最初に Azure AD に YAuth.jp のディレクトリ (<code>yauth.onmicrosoft.com</code>) 作成して、そのあと別の機会に Office 365 の Subscription (<code>yauthjp.onmicrosoft.com</code>) を開始したんで、それら2つが別ディレクトリになっておりまして、前者に <code>yauth.jp</code> ドメインを紐付けてたんで、Office 365 側に <code>yauth.jp</code> ドメインを紐付けられなかったんですね。</p>

<p>で、二つを Merge しようとして <a href="http://ebi.dyndns.biz/windowsadmin/2016/04/07/azure%E3%82%B5%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E6%97%A2%E5%AE%9A%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%82%92o365%E3%81%A7/">Azureサブスクリプションの既定のディレクトリをO365で利用しているAzure Active Directoryに変更する方法</a> ってのを教えてもらったんで、やってみようとしたんですが&hellip;</p>

<p>よくみたら Merge じゃなかったっていうね。</p>

<p>で、まぁ Azure AD 側の <code>yauth.onmicrosoft.com</code> はもうあきらめて消しちゃえってことで消そうとしたら、ユーザーいるから消せねーだの、アプリが登録されてるから消せねーだの言われて、ちまちま消した挙句、<code>Office 365 Management APIs</code> ってのが最後どうしても消せず&hellip;</p>

<p>こうなった。</p>

<p><img src="https://oauth.jp/images/posts/azure/azure-ad-directories.png" alt="Azure AD Directories" /></p>

<p>消せないけどいらん <code>yauth.onmicrosoft.com</code> 側のディレクトリを &ldquo;remove-me&rdquo; にリネームして、そっちから <code>yauth.jp</code> の紐付け解除して <code>yauthjp.onmicrosoft.com</code> 側のディレクトリに紐付け直した。</p>

<p>しょっぱなから解決してないですね。</p>

<p>でも結論から言いますと、これ、たぶん SAML 連携とは全く関係なかったんだろうなって、いまでは思います。</p>

<h2>PowerShell 必須問題</h2>

<p>なんか Azure AD の管理画面には SAML IdP 追加する箇所ないんですよ。</p>

<p>SAML IdP の登録に必要なパラメータなんてせいぜい5-6個やのに、PowerShell ってやつが必須なんですよ。</p>

<p>で、どうも Google 先生がいうには、Mac では PowerShell 使えないっていうじゃないですか。</p>

<p>で、立ち上げましたよ、Windows 10 の VM。<br/>
Mac から Remote Desktop 経由でいじりたかったんでね。</p>

<p>また Surface Pro4 使う機会逃しましたよ。</p>

<p>そしてまた Windows 10 に最初っから入ってる PowerShell じゃ、Azure AD には繋げないんですよ、これが。</p>

<p>いろいろ Google 先生に聞いて出てくるやつかたっぱしから試しても、なんかずっと謎のエラーでつづけてて、あぁ〜、これが MS 流のエラーってやつかぁとか思いながら、最終的にはこれにしたがってエラーなくなりました。</p>

<p><a href="https://technet.microsoft.com/en-ca/library/jj151815.aspx#bkmk_installmodule">Azure Active Directory Cmdlets &ndash; Install the Azure AD Module</a></p>

<p>でもここももう一回ゼロからやり直せって言われたら、またはまる自信ありまくり。</p>

<p>うん、ここもまた解決してない。</p>

<h2>PowerShell 経由で SAML IdP 登録</h2>

<p>これは <a href="http://idmlab.eidentity.jp/2014/12/office365azureadopenamid.html">Office365/AzureAD &ndash; OpenAMとのID連携 (2)</a> にしたがって <code>Set-MsolDomainAuthentication</code> っての走らせたらすんなり完了。</p>

<h2>Federated Domain は Primary にできない制約</h2>

<p>しらんかったよ、Federated Domain は Primary にできないなんて。</p>

<p>MS さん、<code>Failed to change primary domain.</code> しか言ってくれないしさ。</p>

<p>Primary Domain にできないと、そのドメインのメアド持ったユーザー作れないじゃないですか。</p>

<p>SAML IdP 登録したのに Federation できないじゃないですか。</p>

<p>なんか無駄に DNS 設定変えてみたりして、DNS 浸透待ちしまくったよ。</p>

<p>結果、Google 先生に「Federated Domain は Primary にできない」って教えられたよ。</p>

<h2>User の Immutable ID 61文字までしか入れられない制約</h2>

<p>Federated Domain は Primary にできないんで、Azure AD 管理画面からは Federated Domain のユーザーを追加できないんですね。(いや、別にできてもいいとおもうねんけど、なんかそういう制約があるんです)</p>

<p>つまり、ここでも PowerShell 必要なんですよ。</p>

<p>そして、Google 先生に導かれたのがこの PowerShell コマンドです。</p>

<p><a href="https://technet.microsoft.com/en-ca/library/dn194096">New-MsolUser</a></p>

<p>でもまた謎のエラーで、しばらく経ってからやり直せとか言われる。</p>

<p>どんだけまっても同じエラーで、これはしばらく経ってもラチあかねんんじゃね？ってなって&hellip;</p>

<p>結果、Google 先生に「<a href="https://www.gittprogram.com/question/80283_new-msoluser-immutableid-max-length-error.html">Immutable ID には61文字までしか入れられない</a>」って教えられたよ。</p>

<p>こっちは64文字だよ&hellip;</p>

<p>うん、とりあえず SHA1 取った。</p>

<p>解決&hellip;なのか？w</p>

<h2>SAML Request スカスカやのに SAML Response への制約は多い</h2>

<p>SAML Response に関する制約はこちらにまとまってる通りで、それはまぁ SAML IdP 自作できてればそんな対応大変じゃないんですけども&hellip;</p>

<p><a href="https://msdn.microsoft.com/ja-jp/library/azure/dn641269.aspx">シングル サインオンを実装するための SAML 2.0 ID プロバイダーの使用</a></p>

<p>SAML Request スカスカなくせに Response に対する制約多くないすか？</p>

<p>SAML Request に <code>ProtocolBinding</code> とかつけてくれないんすか？ <code>AssertionConsumerServiceURL</code> は？</p>

<p>まぁその辺 OAuth でも省略しても動いたりすることありますけど、そこ省略するとライブラリとかが大変ですよね。</p>

<p>いや、ライブラリそんなないし、O365 対応できないライブラリなんてニーズないんでしょうから、別にいいんですけどね。</p>

<p>でもまぁ、その辺って、センスですよね。</p>

<h2>おわりに</h2>

<p>と、まぁなんだかんだあったけども、無事 O365 にログインできました！</p>

<p>大人の階段のぼってるわぁ〜</p>

<p>プロ千代なってまうわぁ〜</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OAuth Revocation と JWK を翻訳しました]]></title>
    <link href="https://oauth.jp/blog/2016/07/01/jwk-and-oauth-revocation-translated/"/>
    <updated>2016-07-01T10:14:00+09:00</updated>
    <id>https://oauth.jp/blog/2016/07/01/jwk-and-oauth-revocation-translated</id>
    <content type="html"><![CDATA[<p>どうも、この度 OpenID Foundation Japan の事務局長になった Nov です。</p>

<p>事務局長就任のご挨拶的なポエムを書けというオーラをふつふつと感じながら、ガン無視してこの記事を書いております。</p>

<p>さて、みなさん覚えておられるでしょうか？</p>

<p><a href="http://openid-foundation-japan.github.io">OpenID Foundation Japan 翻訳 Working Group</a> のことを。</p>

<p>僕が OpenID のエバンジェリストになる前からリーダーをしており、古くは 2010 年に今は亡き OpenID 2.0 の仕様を翻訳していた、あの伝説の WG を。</p>

<p><strong>その伝説の WG が、2年超の休眠期間を終えて、ついに復活します！</strong></p>

<p>復活第一弾は、OAuth Revocation と JWK！</p>

<ul>
<li><a href="http://openid-foundation-japan.github.io/rfc7009.ja.html">OAuth 2.0 Token Revocation &ndash; RFC 7009</a></li>
<li><a href="http://openid-foundation-japan.github.io/rfc7517.ja.html">JSON Web Key (JWK) &ndash; RFC 7517</a></li>
</ul>


<p>え、この2つにどういう関連性があるのかって？</p>

<p>特にないです！</p>

<p>JWK 翻訳しようとしたら、途中まで翻訳されて休眠してた OAuth Revocation の存在を思い出しただけです！</p>

<!-- more -->


<h2>OAuth Revocation</h2>

<p>OAuth Revocation は、必要なくなったけどまだ有効期限が残っている Access Token や Refresh Token を、OAuth Client が OAuth Server に「もういらないよ」って伝えて、OAuth Server 側で Token の無効化を行う仕様です。</p>

<p>これはまぁ、これだけ実装しても Client が通知してくれなけりゃあまり意味がないので、Client にちゃんと通知させることができるようなガバナンスとセットで意味をなす仕様です。<br/>
サポートしたい OAuth Server の中の人は、ガバナンスもがんばってください。</p>

<h2>JSON Web Key (JWK)</h2>

<p>JWK は、OpenID Connect の ID Token の署名検証用の鍵を公開する場合によく使われる、JSON Format の鍵表現仕様です。</p>

<p>たとえば Google なんかでは、<a href="http://accounts.google.com/.well-known/openid-configuration">OpenID Provider Config Endpoint</a> にアクセスすると、<code>jwks_uri</code> っていう URL が返されて、その <code>jwks_uri</code> にアクセスすると (2016.07.01 時点では) 以下のような JSON が返ってきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;keys&quot;</span><span class="p">:</span> <span class="p">[{</span>
</span><span class='line'>    <span class="nt">&quot;kty&quot;</span><span class="p">:</span> <span class="s2">&quot;RSA&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;alg&quot;</span><span class="p">:</span> <span class="s2">&quot;RS256&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;use&quot;</span><span class="p">:</span> <span class="s2">&quot;sig&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;kid&quot;</span><span class="p">:</span> <span class="s2">&quot;73d4e5a3ccd130498bdb8c47fa025464505264ff&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;n&quot;</span><span class="p">:</span> <span class="s2">&quot;yvWe5x68Dc7OV9E7v-wN6li4ChMbZM1DmIZg1C2Ei-78Mqrfl8x3tZMee-ukykEUBcYQicgBRTo8TfKjAerbSKQ8K7ZKDgzPBEGRmYI9UYpZkCwOzhJ-UYU0QB3HcbF1c0l8sZxWTbzNQkiAmEesHH7klqZWScNou2KQEZR9Cs8zHH4clFqbVp8_jVb6xXuVMkpcDGodBjPvmDHA7BI7suirtiGdAnBtZ_cAX8m6MlX3WknNQ4tr88L-XZhTu8pQi0l-uQgsnTNR0k1XWVzmhCs2ftn1kF-UC8ipnei2va0WmX4EMZ-_6rbWRunio1hr9siOFVFdwQw9m34RXiE_Ow&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;e&quot;</span><span class="p">:</span> <span class="s2">&quot;AQAB&quot;</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;kty&quot;</span><span class="p">:</span> <span class="s2">&quot;RSA&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;alg&quot;</span><span class="p">:</span> <span class="s2">&quot;RS256&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;use&quot;</span><span class="p">:</span> <span class="s2">&quot;sig&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;kid&quot;</span><span class="p">:</span> <span class="s2">&quot;5c20e39d07fff8a69a0b134fe90bf965c8ea458e&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;n&quot;</span><span class="p">:</span> <span class="s2">&quot;r0DVakOHSFsC6x4IEGtqxERP1YJaP-tycQL5b3cpmnxvjfckHZ9pnql0TPaMHKEdjHlr68MBWatgikGLg1l8injeez_fBOk7BDGyjKezxQAY3qDiGD79CD4EuSobOhYZOiSmtRZDRSrULLtcEksOkWvoBi3aRwVPFipdOOTZvP8TRE3erp-TEtVcaACt3_rWKaW7LTA3RLsFzArVDL_tzsGMuACvz0Uab73cUSjYSS6ErJKIQ-cHqsBRhQf1aYvXxu0Jw8TxrRFwbFRgaDlt9NWptMkTAuClzs_ChXlk3K4I6m2fTaNnNgdk0I5sJel-OebertIM91SlnbGzpRSsfw&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;e&quot;</span><span class="p">:</span> <span class="s2">&quot;AQAB&quot;</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;kty&quot;</span><span class="p">:</span> <span class="s2">&quot;RSA&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;alg&quot;</span><span class="p">:</span> <span class="s2">&quot;RS256&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;use&quot;</span><span class="p">:</span> <span class="s2">&quot;sig&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;kid&quot;</span><span class="p">:</span> <span class="s2">&quot;70f6c4267925b33136a1d1cfee4ebc57b249e5cb&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;n&quot;</span><span class="p">:</span> <span class="s2">&quot;qjpXf8YUP22n4Z5DY-YBb8ksxT0YsPDPaCfNtFyXwyE4zInlnw4dSiUud6y0WjPZaVhhVuV_jjgnOgh16lKgaJVYSEaaZDiukI02n5kZ02ZTCkqU27bafL7zBzMBssLliKgnaLFaNH8JBh0mj3suTWp0aB3hMouj1IkkdUB_MCfc6I56tyOwon5JK3vGrYk9vZ--cjTSllN9NYJcWfcUyGoI7RgNz9gvBIznD24NQR1cxmArkusaqmQj6AbARixklSiMpT1qIp0IG-L6wqFi6FHlcbUZnDxCZJVWHfCB9Gfdoox3lgBbdzAebFDomIgxpHwhxsA-iRhYyrjUlSrRiQ&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;e&quot;</span><span class="p">:</span> <span class="s2">&quot;AQAB&quot;</span>
</span><span class='line'>  <span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは JWK 仕様に定められた JSON Web Key Set (JWK Set) というもので、<code>keys</code> という JSON Array の中に含まれている一つ一つの JSON Object が JSON Web Key (JWK) です。</p>

<p>OpenID Connect の場合は RSA 鍵を使うことが多いですが、EC 鍵も Shared Secret も JWK で表現できます。</p>

<p>ACME や WebCrypto など、OpenID Connect 以外の仕様でも、JWK 表現された鍵を見かけることが増えてきたので、今回翻訳することにしました。</p>

<p>実は各暗号アルゴリズムごとに必要な JSON メンバの定義などは JSON Web Algorithm という別仕様にまとめられているので、そちらもいつか翻訳しなきゃなとは思っています。</p>

<p>あと JWK の識別子 (<code>kid</code>) として利用されることがおおい JWK Thumbprint という仕様も、そのうち翻訳しようと思っています。</p>

<p>ということで、今後も <a href="http://openid-foundation-japan.github.io">OIDF-J 翻訳 WG</a> の活動をお楽しみに！</p>

<p>[追記]</p>

<p>JWK Thumbprint も翻訳しました。</p>

<ul>
<li><a href="http://openid-foundation-japan.github.io/rfc7638.ja.html">JSON Web Key (JWK) Thumbprint &ndash; RFC 7638</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Office 365 SAML implementation vulnerability]]></title>
    <link href="https://oauth.jp/blog/2016/05/14/office-365-saml-implementation-vulnerability/"/>
    <updated>2016-05-14T10:32:00+09:00</updated>
    <id>https://oauth.jp/blog/2016/05/14/office-365-saml-implementation-vulnerability</id>
    <content type="html"><![CDATA[<p>先日 Office 365 のこんな記事見つけたので、一応まとめておきますかね。</p>

<p><a href="http://www.economyofmechanism.com/office365-authbypass.html">The road to hell is paved with SAML Assertions</a></p>

<p>タイトルだけ見るとまた SAML is DEAD 案件かと思いきや、Office 365 の脆弱性の話です。</p>

<p>SAML 悪く無いです。</p>

<p>SAML isn&rsquo;t vulnerable, just DEAD.</p>

<h2>SAML SP としての Office 365</h2>

<p>Office 365 は SAML Service Provider (SP) として動作するので、みなさんがお持ちの Identity Provider (IdP) を SAML IdP として動作することができれば、みなさんの IdP に登録されてるアカウントを使って Office 365 にログインすることができます。</p>

<p>みなさんの社内の ADFS とか、Ping Federate / Okta / OneLogin &hellip; みたいな IDaaS とか、そういうのは大抵 SAML IdP として動作するので、そういう製品を使ってるなら、みなさんの会社のアカウントでそのまま Office 365 にログインできます。</p>

<p>通常 SAML SP は、IdP から返ってくる SAML Response に含まれる IdP 側のユーザー識別子 (Subject Identifier) と IdP 自身の識別子 (Issuer Identifier) のペアを元に、SP 側のアカウントにログインさせます。</p>

<p>がしかし、Office 365 の場合は、IdP が渡してくる Email アドレスと Office 365 がローカルで持ってる Email アドレスの一致だけを見て Office 365 ローカルのユーザーを認証していたようです。Subject Identifier も Issuer Identifier も無視していた、と。</p>

<p>(実際には、SAML IdP と Office 365 の間に Azure AD が介在しており、SAML Assertion の検証は Azure ADがやるようなアーキテクチャになっていて、Azure AD では Subject Identifier &amp; Issuer Identifier をちゃんと見ているようですが、全体として見ると Office 365 が SAML IdP の Issuer と Subject をガン無視した形になってます。この辺の話しだすとややこしい割に MS 以外の人にはあまり関係無い話になっちゃうので、今回はスルー)</p>

<h2>Office 365 の脆弱性概要</h2>

<p>これで何が起こっていたかというと、<code>nov@victim.example.com</code> という Email アドレスを持つ Office 365 ユーザーのアカウントにログインする際に、<code>attacker.example.com</code> という IdP が <code>nov@victim.example.com</code> という Email アドレスを含んだ SAML Assertion を発行すると、Office 365 がその Assertion を受け入れて <code>nov@victim.example.com</code> の Office 365 アカウントへのログインを許可してしまっていました。</p>

<p>よって、以下の2つのパターンが、どちらも同じ Office 365 アカウントにログイン可能になっていました。</p>

<table>
<thead>
<tr>
<th></th>
<th> Issuer Identifier    </th>
<th> Subject Identifier  </th>
<th> Email Address          </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> attacker.example.com </td>
<td> 58df3c9b2c32ca86f.. </td>
<td> <code>nov@victim.example.com</code></td>
</tr>
<tr>
<td></td>
<td> victim.example.com   </td>
<td> 20166f0c077c1f6c1.. </td>
<td> <code>nov@victim.example.com</code></td>
</tr>
</tbody>
</table>


<p>うん、これは最悪ですね。</p>

<!-- more -->


<h2>Consumer の世界に置き換えると、つまりどういうこと？</h2>

<p>Consumer 分野であれば、Facebook と Google の両方を IdP として使う RP がいる場合、Facebook が返すユーザーの Email アドレスが Gmail だったりすることは普通にあります。</p>

<p>この時、Facebook が <code>nov@gmail.com</code> というメアドを返してきた場合に、RP 側で <code>nov@gmail.com</code> というメアドを持つユーザーを、たとえそのアカウントが Facebook アカウントと紐付いていない状況だったとしても認証してしまう、と、Office 365 がやっていたのは、そういう処理です。</p>

<p>Facebook と Google だけが IdP であれば、どちらも Email 疎通確認等をちゃんとしているという前提があるため、以下の2つの Identity は同一人物に紐づくという前提で設計することもできるでしょう。</p>

<table>
<thead>
<tr>
<th></th>
<th> Issuer  Identifier </th>
<th> Subject Identifier  </th>
<th> Email Address   </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> google.com         </td>
<td> 58df3c9b2c32ca86f.. </td>
<td> <code>nov@gmail.com</code></td>
</tr>
<tr>
<td></td>
<td> facebook.com       </td>
<td> 58df3c9b2c32ca86f.. </td>
<td> <code>nov@gmail.com</code></td>
</tr>
</tbody>
</table>


<p>しかし、OpenID 2.0 の頃のように、ユーザーが Dynamic に任意の IdP を選択できるとしたらどうでしょう？</p>

<p>以下の3つめのアカウントが、その上の2つと同一人物に紐づくという前提条件は、あっさり崩れてしまいます。</p>

<table>
<thead>
<tr>
<th></th>
<th> Issuer Identifier    </th>
<th> Subject Identifier  </th>
<th> Email Address   </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> google.com           </td>
<td> 58df3c9b2c32ca86f.. </td>
<td> <code>nov@gmail.com</code></td>
</tr>
<tr>
<td></td>
<td> facebook.com         </td>
<td> 58df3c9b2c32ca86f.. </td>
<td> <code>nov@gmail.com</code></td>
</tr>
<tr>
<td></td>
<td> attacker.example.com </td>
<td> 58df3c9b2c32ca86f.. </td>
<td> <code>nov@gmail.com</code></td>
</tr>
</tbody>
</table>


<p>Office 365 の場合、テナントごとに任意の IdP を指定することができるため、攻撃者が Office 365 にテナント登録してしまいさえすれば、<code>attacker.example.com</code> を IdP として登録できてしまい、上記の3つめのパターンを作り出すことができてしまいます。</p>

<p>そして、OpenID Connect でも「OAuth 認証」でも、同じような脆弱性は発生しそうですね。</p>

<p>SAMLer 以外のみなさんも、気をつけないとですね。</p>

<h2>こういう場合、どうすればいいの？</h2>

<p>まずは基本的には、以下3つのパターンが RP 側では全て異なるアカウントに紐づくように設計することです。</p>

<p>つまり、Subject Identifier と Issuer Identifier のペアごとに、異なるアカウントに紐づくようにする、と。</p>

<table>
<thead>
<tr>
<th></th>
<th> Issuer Identifier    </th>
<th> Subject Identifier  </th>
<th> Email Address   </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> google.com           </td>
<td> 58df3c9b2c32ca86f.. </td>
<td> <code>nov@gmail.com</code></td>
</tr>
<tr>
<td></td>
<td> facebook.com         </td>
<td> 58df3c9b2c32ca86f.. </td>
<td> <code>nov@gmail.com</code></td>
</tr>
<tr>
<td></td>
<td> attacker.example.com </td>
<td> 58df3c9b2c32ca86f.. </td>
<td> <code>nov@gmail.com</code></td>
</tr>
</tbody>
</table>


<p>その上で、RP 側で Email アドレスがユニークである必要があるのであれば、3つのアカウントを RP 側で一つのアカウントに紐付けるためのフローを RP が頑張って実装するか、IdP から渡される Email アドレスを無視して別の Email アドレスを設定させる等の処理が必要です。</p>

<p>そのあたりの細かい実装方法については&hellip; <a href="http://yauth.jp">YAuth.jp</a> に相談？w</p>

<h2>Office 365 はどういう修正をしたのか？</h2>

<p>これは、元記事にも書いて無いですね。</p>

<p>でも7時間で修正されたって書いてあるので、上記のような解決策ではなくて、以下の1つめのパターンを reject するようにしたのでしょう。</p>

<table>
<thead>
<tr>
<th></th>
<th> Issuer Identifier    </th>
<th> Subject Identifier  </th>
<th> Email Address          </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> attacker.example.com </td>
<td> 58df3c9b2c32ca86f.. </td>
<td> <code>nov@victim.example.com</code></td>
</tr>
<tr>
<td></td>
<td> victim.example.com   </td>
<td> 58df3c9b2c32ca86f.. </td>
<td> <code>nov@victim.example.com</code></td>
</tr>
</tbody>
</table>


<p>要するに Issuer チェックをするようにしたんでしょうが、SAML IdP と Office 365 の間に Azure AD がいるっていう状態で、具体的にどの箇所でどういう検証をするようにしたのかってのは、よくわからず。</p>

<p>Office 365 の MVP の人とかに聞くとわかるんですかね、こういうのは？</p>

<p>ps.
本記事執筆にあたっては、<a href="http://idmlab.eidentity.jp">腹違いの兄さんことふぁらおう兄さん</a>に長時間にわたって相談に乗っていただきました。にいさん、いつもありがとうございます！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OAuth / Connect における CSRF Attack の新パターン]]></title>
    <link href="https://oauth.jp/blog/2016/05/06/another-csrf-attack/"/>
    <updated>2016-05-06T14:19:00+09:00</updated>
    <id>https://oauth.jp/blog/2016/05/06/another-csrf-attack</id>
    <content type="html"><![CDATA[<p>昨日こんなのが OAuth ML に流れてました。</p>

<p><a href="https://mailarchive.ietf.org/arch/search/?email_list=oauth&amp;gbt=1&amp;index=G4J3H1BMyIN01FCOLKqLjrx7AZ4">[OAUTH-WG] Another CSRF attack</a></p>

<h2>前提条件</h2>

<p>RP (Relying Party a.k.a. OAuth Client) が2つ以上の IdP (Identity Provider a.k.a. OAuth Server) と連携している状況で、片方の IdP に悪意がある。</p>

<ul>
<li>悪意ある IdP = AIdP (A は Attacker の略)</li>
<li>その他の IdP = HIdP (H は Honest の略)</li>
</ul>


<h2>攻撃フロー</h2>

<p><img src="https://www.websequencediagrams.com/cgi-bin/cdraw?lz=YWx0IFZpY3RpbSdzIFNlc3Npb24KICAgAA4HLT5SUDogTG9naW4gdy8gQUlkUAAZBVJQLT4AMQY6ACENQUlkUDogQXV0aFogUmVxIHcvIHN0YXRlLVYAUAVBSWQALwoAIgVlbnRpY2F0ZQA0EgAmC0gAUAZ0dGFja2VyJ3MgY3JlZGVudGlhbHMAgSgFSABTBQB3BmNvZABIBgBfDkhJZFAncwAZBQCBCwsgKHRvIHJlZGlyZWN0X3VyaSBmb3IASgUpAIF2EACBbwlSUDoANglpcyB0aWVkIHRvIHRoZSBzAII7BiwgT0shAIIfCQCBOAYAgQ4JAIEmBlIAgUMOYWNjZXNzX3Rva2VuICYgaWQABQYAglwQIEhlbGxvLCB3aGF0J3MgeW91ciBuYW1lPwCDIhFJJ20Ag1EHCmVsc2UAgjEMAINaDACCTAgAg0wcAIJwCACDCwcAKQkAgw8HAINaEkEAgwgMADUIAINcEgA7DwAgFQCDIQ4AUwYAgScNAIMDE0EAgi1pAIFTCldlbGNvbWUgYmFjaywAhkoHIQplbmQK&amp;s=earth" alt="Another CSRF Attack" /></p>

<ol>
<li>Victim が AIdP を使って RP へのログインを試みる。</li>
<li>RP は Authorization Request を AIdP に送る。

<ul>
<li>AuthZ Req には Browser Session と紐付いた <code>state</code> パラメータをつけている。</li>
</ul>
</li>
<li>AIdP は Victim を認証し、必要に応じて同意を取得する (ふりをする)

<ul>
<li>同時に AIdP は裏で HIdP から <code>code</code> を取得する。</li>
<li>HIdP の code は Attacker の HIdP 上のアカウントに紐付いているもの。</li>
</ul>
</li>
<li>AIdP は HIdP から取得した <code>code</code> を、RP の HIdP 用 <code>redirect_uri</code> に返す。

<ul>
<li>この時 Step2 で RP が発行した <code>state</code> を付与する。</li>
</ul>
</li>
<li>RP は Browser Session と紐付いた <code>state</code> を検証した上で <code>code</code> を HIdP の Token Endpoint に送る。</li>
<li>HIdP は Attacker のアカウントに紐付いた <code>access_token</code> を返す。</li>
<li>RP は Victim をログインさせる。

<ul>
<li>ここで HIdP 上の Attacker アカウントと RP 上の Victim アカウントが紐づけられる。</li>
</ul>
</li>
</ol>


<p>そして、Attacker は任意のタイミングで自身の HIdP 上のアカウントを使って、RP 上の Victim のアカウントにログインできる。</p>

<h2>防御策</h2>

<p><code>state</code> をリクエスト先の IdP とも紐づけましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FB Message API Callback as an Azure Function]]></title>
    <link href="https://oauth.jp/blog/2016/04/19/fb-message-callback-with-azure-function/"/>
    <updated>2016-04-19T10:56:00+09:00</updated>
    <id>https://oauth.jp/blog/2016/04/19/fb-message-callback-with-azure-function</id>
    <content type="html"><![CDATA[<p>今日は Azure Function で FB Message API Callback を作ってみます。</p>

<p>Azure Function は、Azure Portal の Marketplace で &ldquo;Function App&rdquo; って検索すると出てきますね。</p>

<p><img src="https://oauth.jp/images/posts/azure/azure-function-in-marketplace.png" alt="Azure Function in Marketplace" /></p>

<p>Function App の Deploy がおわったら、QuickStart から &ldquo;Webhook + API&rdquo; を選びましょう。</p>

<p><img src="https://oauth.jp/images/posts/azure/azure-function-quickstart.png" alt="Azure Function QuickStart" /></p>

<p>以下の様な Node.js のテンプレートアプリが出来上がります。</p>

<p><img src="https://oauth.jp/images/posts/azure/azure-function-template.png" alt="Azure Function Template" /></p>

<p>まずは FB Message の WebHook としてこの Function を登録します。</p>

<!-- more -->


<p>Azure Function の <code>Function URL</code> を FB Message API の <code>WebHook Callback URL</code> に登録して、適当な <code>verify_token</code> を設定します。</p>

<p><img src="https://oauth.jp/images/posts/azure/fb-message-callback.png" alt="FB Message API Callback (FB WebHook)" /></p>

<p>WebHook Verification のために、テンプレの Azure Function を以下の様に書き換えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">req</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">[</span><span class="s1">&#39;hub.verify_token&#39;</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;verify-me&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">context</span><span class="p">.</span><span class="nx">res</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">body</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">[</span><span class="s1">&#39;hub.challenge&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">context</span><span class="p">.</span><span class="nx">done</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで FB 側の <code>Verify and Save</code> ボタンを押せば、WebHook の Verifycation が成功して WebHook の登録が完了します。</p>

<p>では次に、Text Message を Echo するように Azure Function を書き換えましょう。</p>

<p>まずは FB Graph API の Messaging API を叩くために必要な FB Page Token を、Azure Function の <code>Application Setting &gt; App Setting</code> に設定しておきます。</p>

<p>この時に使う FB Page Token は、先ほど WebHook を登録したページ (FB Messenger API の設定ページ) で取得したものを使う様にしてください。そこで取得した FB Page Token は Expire しません。</p>

<p><img src="https://oauth.jp/images/posts/azure/azure-function-env.png" alt="Azure Function Env" /></p>

<p>あとは Azure Function 側を以下の様に書き換えてやれば OK です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">https</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;https&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">sendTextMessage</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">sender</span><span class="p">,</span> <span class="nx">text</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">postData</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">recipient</span><span class="o">:</span> <span class="nx">sender</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">message</span><span class="o">:</span> <span class="p">{</span><span class="nx">text</span><span class="o">:</span> <span class="nx">text</span><span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">req</span> <span class="o">=</span> <span class="nx">https</span><span class="p">.</span><span class="nx">request</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">hostname</span><span class="o">:</span> <span class="s1">&#39;graph.facebook.com&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">port</span><span class="o">:</span> <span class="mi">443</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/v2.6/me/messages&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;application/json&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;Authorization&#39;</span><span class="o">:</span> <span class="s1">&#39;Bearer &#39;</span> <span class="o">+</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">APPSETTING_FB_PAGE_TOKEN</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">req</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">postData</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">req</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">req</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">messaging_evts</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">entry</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">messaging</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">messaging_evts</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">evt</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">entry</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">messaging</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>    <span class="nx">sender</span> <span class="o">=</span> <span class="nx">evt</span><span class="p">.</span><span class="nx">sender</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">evt</span><span class="p">.</span><span class="nx">message</span> <span class="o">&amp;&amp;</span> <span class="nx">evt</span><span class="p">.</span><span class="nx">message</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">sendTextMessage</span><span class="p">(</span><span class="nx">sender</span><span class="p">,</span> <span class="nx">evt</span><span class="p">.</span><span class="nx">message</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="nx">context</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">context</span><span class="p">.</span><span class="nx">done</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>早速該当 FB Page にメッセージを送ってみましょう。Echo が返ってくると思います。</p>

<p>さてと、YAuth.jp の問い合わせ対応 Bot を作ってみるかな。</p>
]]></content>
  </entry>
  
</feed>
